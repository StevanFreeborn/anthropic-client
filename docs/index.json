{
  "api/AnthropicClient.AnthropicApiClient.html": {
    "href": "api/AnthropicClient.AnthropicApiClient.html",
    "title": "Class AnthropicApiClient | AnthropicClient",
    "summary": "Class AnthropicApiClient Namespace AnthropicClient Assembly AnthropicClient.dll Represents a client for interacting with the Anthropic API. public class AnthropicApiClient : IAnthropicApiClient Inheritance object AnthropicApiClient Implements IAnthropicApiClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AnthropicApiClient(string, HttpClient) Initializes a new instance of the AnthropicApiClient class. public AnthropicApiClient(string apiKey, HttpClient httpClient) Parameters apiKey string The API key to use for the client. httpClient HttpClient The HTTP client to use for the client. Exceptions ArgumentNullException Thrown when the API key or HTTP client is null. Methods CancelMessageBatchAsync(string, CancellationToken) Cancels a message batch asynchronously. public Task<AnthropicResult<MessageBatchResponse>> CancelMessageBatchAsync(string batchId, CancellationToken cancellationToken = default) Parameters batchId string The ID of the message batch to cancel. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns Task<AnthropicResult<MessageBatchResponse>> A task that represents the asynchronous operation. The task result contains the response as an AnthropicResult<T> where T is MessageBatchResponse. CountMessageTokensAsync(CountMessageTokensRequest, CancellationToken) Counts the tokens in a message asynchronously. public Task<AnthropicResult<TokenCountResponse>> CountMessageTokensAsync(CountMessageTokensRequest request, CancellationToken cancellationToken = default) Parameters request CountMessageTokensRequest The count message tokens request. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns Task<AnthropicResult<TokenCountResponse>> A task that represents the asynchronous operation. The task result contains the response as an AnthropicResult<T> where T is TokenCountResponse. CreateMessageAsync(MessageRequest, CancellationToken) Creates a message asynchronously. public Task<AnthropicResult<MessageResponse>> CreateMessageAsync(MessageRequest request, CancellationToken cancellationToken = default) Parameters request MessageRequest The message request to create. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns Task<AnthropicResult<MessageResponse>> A task that represents the asynchronous operation. The task result contains the response as an AnthropicResult<T>. CreateMessageAsync(StreamMessageRequest, CancellationToken) Creates a message asynchronously and streams the response. public IAsyncEnumerable<AnthropicEvent> CreateMessageAsync(StreamMessageRequest request, CancellationToken cancellationToken = default) Parameters request StreamMessageRequest The message request to create. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns IAsyncEnumerable<AnthropicEvent> An asynchronous enumerable that yields the response event by event. CreateMessageBatchAsync(MessageBatchRequest, CancellationToken) Creates a batch of messages asynchronously. public Task<AnthropicResult<MessageBatchResponse>> CreateMessageBatchAsync(MessageBatchRequest request, CancellationToken cancellationToken = default) Parameters request MessageBatchRequest The message batch request to create. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns Task<AnthropicResult<MessageBatchResponse>> A task that represents the asynchronous operation. The task result contains the response as an AnthropicResult<T> where T is MessageBatchResponse. DeleteMessageBatchAsync(string, CancellationToken) Deletes a message batch asynchronously. public Task<AnthropicResult<MessageBatchDeleteResponse>> DeleteMessageBatchAsync(string batchId, CancellationToken cancellationToken = default) Parameters batchId string The ID of the message batch to delete. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns Task<AnthropicResult<MessageBatchDeleteResponse>> A task that represents the asynchronous operation. The task result contains the response as an AnthropicResult<T> where T is MessageBatchDeleteResponse. GetMessageBatchAsync(string, CancellationToken) Gets a message batch asynchronously. public Task<AnthropicResult<MessageBatchResponse>> GetMessageBatchAsync(string batchId, CancellationToken cancellationToken = default) Parameters batchId string The ID of the message batch to get. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns Task<AnthropicResult<MessageBatchResponse>> A task that represents the asynchronous operation. The task result contains the response as an AnthropicResult<T> where T is MessageBatchResponse. GetMessageBatchResultsAsync(string, CancellationToken) Gets the results of a message batch asynchronously. public Task<AnthropicResult<IAsyncEnumerable<MessageBatchResultItem>>> GetMessageBatchResultsAsync(string batchId, CancellationToken cancellationToken = default) Parameters batchId string The ID of the message batch to get the results for. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns Task<AnthropicResult<IAsyncEnumerable<MessageBatchResultItem>>> A task that represents the asynchronous operation. The task result contains the response as an AnthropicResult<T> where T is IAsyncEnumerable<T> where T is MessageBatchResultItem. GetModelAsync(string, CancellationToken) Gets a model by its ID asynchronously. public Task<AnthropicResult<AnthropicModel>> GetModelAsync(string modelId, CancellationToken cancellationToken = default) Parameters modelId string The ID of the model to get. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns Task<AnthropicResult<AnthropicModel>> A task that represents the asynchronous operation. The task result contains the response as an AnthropicResult<T> where T is AnthropicModel. ListAllMessageBatchesAsync(int, CancellationToken) Lists all message batches asynchronously. public IAsyncEnumerable<AnthropicResult<Page<MessageBatchResponse>>> ListAllMessageBatchesAsync(int limit = 20, CancellationToken cancellationToken = default) Parameters limit int The maximum number of message batches to return in each page. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns IAsyncEnumerable<AnthropicResult<Page<MessageBatchResponse>>> An asynchronous enumerable that yields the response as an AnthropicResult<T> where T is Page<T> where T is MessageBatchResponse. ListAllModelsAsync(int, CancellationToken) Lists all models asynchronously, returning every page of results. public IAsyncEnumerable<AnthropicResult<Page<AnthropicModel>>> ListAllModelsAsync(int limit = 20, CancellationToken cancellationToken = default) Parameters limit int The maximum number of models to return in each page. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns IAsyncEnumerable<AnthropicResult<Page<AnthropicModel>>> An asynchronous enumerable that yields the response as an AnthropicResult<T> where T is Page<T> where T is AnthropicModel. ListMessageBatchesAsync(PagingRequest?, CancellationToken) Lists the message batches asynchronously. public Task<AnthropicResult<Page<MessageBatchResponse>>> ListMessageBatchesAsync(PagingRequest? request = null, CancellationToken cancellationToken = default) Parameters request PagingRequest The paging request to use for listing the message batches. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns Task<AnthropicResult<Page<MessageBatchResponse>>> A task that represents the asynchronous operation. The task result contains the response as an AnthropicResult<T> where T is Page<T> where T is MessageBatchResponse. ListModelsAsync(PagingRequest?, CancellationToken) Lists models asynchronously, returning a single page of results. public Task<AnthropicResult<Page<AnthropicModel>>> ListModelsAsync(PagingRequest? request = null, CancellationToken cancellationToken = default) Parameters request PagingRequest The paging request to use for listing the models. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns Task<AnthropicResult<Page<AnthropicModel>>> A task that represents the asynchronous operation. The task result contains the response as an AnthropicResult<T> where T is Page<T> where T is AnthropicModel."
  },
  "api/AnthropicClient.IAnthropicApiClient.html": {
    "href": "api/AnthropicClient.IAnthropicApiClient.html",
    "title": "Interface IAnthropicApiClient | AnthropicClient",
    "summary": "Interface IAnthropicApiClient Namespace AnthropicClient Assembly AnthropicClient.dll Represents a client for interacting with the Anthropic API. public interface IAnthropicApiClient Methods CancelMessageBatchAsync(string, CancellationToken) Cancels a message batch asynchronously. Task<AnthropicResult<MessageBatchResponse>> CancelMessageBatchAsync(string batchId, CancellationToken cancellationToken = default) Parameters batchId string The ID of the message batch to cancel. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns Task<AnthropicResult<MessageBatchResponse>> A task that represents the asynchronous operation. The task result contains the response as an AnthropicResult<T> where T is MessageBatchResponse. CountMessageTokensAsync(CountMessageTokensRequest, CancellationToken) Counts the tokens in a message asynchronously. Task<AnthropicResult<TokenCountResponse>> CountMessageTokensAsync(CountMessageTokensRequest request, CancellationToken cancellationToken = default) Parameters request CountMessageTokensRequest The count message tokens request. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns Task<AnthropicResult<TokenCountResponse>> A task that represents the asynchronous operation. The task result contains the response as an AnthropicResult<T> where T is TokenCountResponse. CreateMessageAsync(MessageRequest, CancellationToken) Creates a message asynchronously. Task<AnthropicResult<MessageResponse>> CreateMessageAsync(MessageRequest request, CancellationToken cancellationToken = default) Parameters request MessageRequest The message request to create. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns Task<AnthropicResult<MessageResponse>> A task that represents the asynchronous operation. The task result contains the response as an AnthropicResult<T>. CreateMessageAsync(StreamMessageRequest, CancellationToken) Creates a message asynchronously and streams the response. IAsyncEnumerable<AnthropicEvent> CreateMessageAsync(StreamMessageRequest request, CancellationToken cancellationToken = default) Parameters request StreamMessageRequest The message request to create. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns IAsyncEnumerable<AnthropicEvent> An asynchronous enumerable that yields the response event by event. CreateMessageBatchAsync(MessageBatchRequest, CancellationToken) Creates a batch of messages asynchronously. Task<AnthropicResult<MessageBatchResponse>> CreateMessageBatchAsync(MessageBatchRequest request, CancellationToken cancellationToken = default) Parameters request MessageBatchRequest The message batch request to create. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns Task<AnthropicResult<MessageBatchResponse>> A task that represents the asynchronous operation. The task result contains the response as an AnthropicResult<T> where T is MessageBatchResponse. DeleteMessageBatchAsync(string, CancellationToken) Deletes a message batch asynchronously. Task<AnthropicResult<MessageBatchDeleteResponse>> DeleteMessageBatchAsync(string batchId, CancellationToken cancellationToken = default) Parameters batchId string The ID of the message batch to delete. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns Task<AnthropicResult<MessageBatchDeleteResponse>> A task that represents the asynchronous operation. The task result contains the response as an AnthropicResult<T> where T is MessageBatchDeleteResponse. GetMessageBatchAsync(string, CancellationToken) Gets a message batch asynchronously. Task<AnthropicResult<MessageBatchResponse>> GetMessageBatchAsync(string batchId, CancellationToken cancellationToken = default) Parameters batchId string The ID of the message batch to get. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns Task<AnthropicResult<MessageBatchResponse>> A task that represents the asynchronous operation. The task result contains the response as an AnthropicResult<T> where T is MessageBatchResponse. GetMessageBatchResultsAsync(string, CancellationToken) Gets the results of a message batch asynchronously. Task<AnthropicResult<IAsyncEnumerable<MessageBatchResultItem>>> GetMessageBatchResultsAsync(string batchId, CancellationToken cancellationToken = default) Parameters batchId string The ID of the message batch to get the results for. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns Task<AnthropicResult<IAsyncEnumerable<MessageBatchResultItem>>> A task that represents the asynchronous operation. The task result contains the response as an AnthropicResult<T> where T is IAsyncEnumerable<T> where T is MessageBatchResultItem. GetModelAsync(string, CancellationToken) Gets a model by its ID asynchronously. Task<AnthropicResult<AnthropicModel>> GetModelAsync(string modelId, CancellationToken cancellationToken = default) Parameters modelId string The ID of the model to get. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns Task<AnthropicResult<AnthropicModel>> A task that represents the asynchronous operation. The task result contains the response as an AnthropicResult<T> where T is AnthropicModel. ListAllMessageBatchesAsync(int, CancellationToken) Lists all message batches asynchronously. IAsyncEnumerable<AnthropicResult<Page<MessageBatchResponse>>> ListAllMessageBatchesAsync(int limit = 20, CancellationToken cancellationToken = default) Parameters limit int The maximum number of message batches to return in each page. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns IAsyncEnumerable<AnthropicResult<Page<MessageBatchResponse>>> An asynchronous enumerable that yields the response as an AnthropicResult<T> where T is Page<T> where T is MessageBatchResponse. ListAllModelsAsync(int, CancellationToken) Lists all models asynchronously, returning every page of results. IAsyncEnumerable<AnthropicResult<Page<AnthropicModel>>> ListAllModelsAsync(int limit = 20, CancellationToken cancellationToken = default) Parameters limit int The maximum number of models to return in each page. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns IAsyncEnumerable<AnthropicResult<Page<AnthropicModel>>> An asynchronous enumerable that yields the response as an AnthropicResult<T> where T is Page<T> where T is AnthropicModel. ListMessageBatchesAsync(PagingRequest?, CancellationToken) Lists the message batches asynchronously. Task<AnthropicResult<Page<MessageBatchResponse>>> ListMessageBatchesAsync(PagingRequest? request = null, CancellationToken cancellationToken = default) Parameters request PagingRequest The paging request to use for listing the message batches. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns Task<AnthropicResult<Page<MessageBatchResponse>>> A task that represents the asynchronous operation. The task result contains the response as an AnthropicResult<T> where T is Page<T> where T is MessageBatchResponse. ListModelsAsync(PagingRequest?, CancellationToken) Lists models asynchronously, returning a single page of results. Task<AnthropicResult<Page<AnthropicModel>>> ListModelsAsync(PagingRequest? request = null, CancellationToken cancellationToken = default) Parameters request PagingRequest The paging request to use for listing the models. cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns Task<AnthropicResult<Page<AnthropicModel>>> A task that represents the asynchronous operation. The task result contains the response as an AnthropicResult<T> where T is Page<T> where T is AnthropicModel."
  },
  "api/AnthropicClient.Models.AnthropicError.html": {
    "href": "api/AnthropicClient.Models.AnthropicError.html",
    "title": "Class AnthropicError | AnthropicClient",
    "summary": "Class AnthropicError Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents an error response from the Anthropic API. public class AnthropicError Inheritance object AnthropicError Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AnthropicError(Error) Initializes a new instance of the AnthropicError class. public AnthropicError(Error error) Parameters error Error The error as an Error object. Properties Error The error object. public Error Error { get; init; } Property Value Error Type The type of the error. public string Type { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.AnthropicEvent.html": {
    "href": "api/AnthropicClient.Models.AnthropicEvent.html",
    "title": "Class AnthropicEvent | AnthropicClient",
    "summary": "Class AnthropicEvent Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents an event from the Anthropic API. public class AnthropicEvent Inheritance object AnthropicEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AnthropicEvent(string, EventData) Initializes a new instance of the AnthropicEvent class. public AnthropicEvent(string type, EventData data) Parameters type string The type of the event. data EventData The data associated with the event. Properties Data The data associated with the event. public EventData Data { get; init; } Property Value EventData Type The type of the event. public string Type { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.AnthropicFunction.html": {
    "href": "api/AnthropicClient.Models.AnthropicFunction.html",
    "title": "Class AnthropicFunction | AnthropicClient",
    "summary": "Class AnthropicFunction Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a function that can be provided as a tool. public class AnthropicFunction Inheritance object AnthropicFunction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Instance Gets the instance on which the method is invoked. public object? Instance { get; } Property Value object Method Gets the method of the function. public MethodInfo Method { get; } Property Value MethodInfo"
  },
  "api/AnthropicClient.Models.AnthropicHeaders.html": {
    "href": "api/AnthropicClient.Models.AnthropicHeaders.html",
    "title": "Class AnthropicHeaders | AnthropicClient",
    "summary": "Class AnthropicHeaders Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents headers included in Anthropic API responses. public class AnthropicHeaders Inheritance object AnthropicHeaders Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AnthropicHeaders(HttpResponseHeaders) Initializes a new instance of the AnthropicHeaders class. public AnthropicHeaders(HttpResponseHeaders headers) Parameters headers HttpResponseHeaders The HTTP response headers. Properties RateLimitRequestsLimit Gets the rate limit requests limit. public int RateLimitRequestsLimit { get; init; } Property Value int RateLimitRequestsRemaining Gets the rate limit requests remaining. public int RateLimitRequestsRemaining { get; init; } Property Value int RateLimitRequestsReset Gets the time of the rate limit requests reset. public DateTimeOffset RateLimitRequestsReset { get; init; } Property Value DateTimeOffset RateLimitTokensLimit Gets the rate limit tokens limit. public int RateLimitTokensLimit { get; init; } Property Value int RateLimitTokensRemaining Gets the rate limit tokens remaining. public int RateLimitTokensRemaining { get; init; } Property Value int RateLimitTokensReset Gets the time of the rate limit tokens reset. public DateTimeOffset RateLimitTokensReset { get; init; } Property Value DateTimeOffset RequestId Gets the request ID. public string RequestId { get; init; } Property Value string RetryAfter Gets the retry after value. public int RetryAfter { get; init; } Property Value int"
  },
  "api/AnthropicClient.Models.AnthropicModel.html": {
    "href": "api/AnthropicClient.Models.AnthropicModel.html",
    "title": "Class AnthropicModel | AnthropicClient",
    "summary": "Class AnthropicModel Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents an Anthropic model. public class AnthropicModel Inheritance object AnthropicModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt The created date of the model. [JsonPropertyName(\"created_at\")] public DateTimeOffset CreatedAt { get; init; } Property Value DateTimeOffset DisplayName The display name of the model. [JsonPropertyName(\"display_name\")] public string DisplayName { get; init; } Property Value string Id The id of the model. public string Id { get; init; } Property Value string Type The type of the model. public string Type { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.AnthropicModels.html": {
    "href": "api/AnthropicClient.Models.AnthropicModels.html",
    "title": "Class AnthropicModels | AnthropicClient",
    "summary": "Class AnthropicModels Namespace AnthropicClient.Models Assembly AnthropicClient.dll Provides constants for the Anthropic models. public static class AnthropicModels Inheritance object AnthropicModels Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Claude35Haiku20241022 The Claude 3.5 Haiku model. public const string Claude35Haiku20241022 = \"claude-3-5-haiku-20241022\" Field Value string Claude35HaikuLatest The Claude 3.5 Haiku model. public const string Claude35HaikuLatest = \"claude-3-5-haiku-latest\" Field Value string Claude35Sonnet The Claude 3.5 Sonnet model. public const string Claude35Sonnet = \"claude-3-5-sonnet-20240620\" Field Value string Claude35Sonnet20240620 The Claude 3.5 Sonnet model. public const string Claude35Sonnet20240620 = \"claude-3-5-sonnet-20240620\" Field Value string Claude35Sonnet20241022 The Claude 3.5 Sonnet model. public const string Claude35Sonnet20241022 = \"claude-3-5-sonnet-20241022\" Field Value string Claude35SonnetLatest The Claude 3.5 Sonnet model. public const string Claude35SonnetLatest = \"claude-3-5-sonnet-latest\" Field Value string Claude3Haiku The Claude 3 Haiku model. public const string Claude3Haiku = \"claude-3-haiku-20240307\" Field Value string Claude3Haiku20240307 The Claude 3 Haiku model. public const string Claude3Haiku20240307 = \"claude-3-haiku-20240307\" Field Value string Claude3Opus The Claude 3 Opus model. public const string Claude3Opus = \"claude-3-opus-20240229\" Field Value string Claude3Opus20241022 The Claude 3 Opus model. public const string Claude3Opus20241022 = \"claude-3-opus-20240229\" Field Value string Claude3OpusLatest The Claude 3 Opus model. public const string Claude3OpusLatest = \"claude-3-opus-latest\" Field Value string Claude3Sonnet The Claude 3 Sonnet model. public const string Claude3Sonnet = \"claude-3-sonnet-20240229\" Field Value string Claude3Sonnet20240229 The Claude 3 Sonnet model. public const string Claude3Sonnet20240229 = \"claude-3-sonnet-20240229\" Field Value string"
  },
  "api/AnthropicClient.Models.AnyToolChoice.html": {
    "href": "api/AnthropicClient.Models.AnyToolChoice.html",
    "title": "Class AnyToolChoice | AnthropicClient",
    "summary": "Class AnyToolChoice Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents the any tool choice mode. public class AnyToolChoice : ToolChoice Inheritance object ToolChoice AnyToolChoice Inherited Members ToolChoice.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AnyToolChoice() Initializes a new instance of the AnyToolChoice class. public AnyToolChoice()"
  },
  "api/AnthropicClient.Models.ApiError.html": {
    "href": "api/AnthropicClient.Models.ApiError.html",
    "title": "Class ApiError | AnthropicClient",
    "summary": "Class ApiError Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents an api_error response from the Anthropic API. public class ApiError : Error Inheritance object Error ApiError Inherited Members Error.Type Error.Message object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApiError(string) Initializes a new instance of the ApiError class. public ApiError(string message) Parameters message string The error message."
  },
  "api/AnthropicClient.Models.AuthenticationError.html": {
    "href": "api/AnthropicClient.Models.AuthenticationError.html",
    "title": "Class AuthenticationError | AnthropicClient",
    "summary": "Class AuthenticationError Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents an authentication_error response from the Anthropic API. public class AuthenticationError : Error Inheritance object Error AuthenticationError Inherited Members Error.Type Error.Message object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthenticationError(string) Initializes a new instance of the AuthenticationError class. public AuthenticationError(string message) Parameters message string The error message."
  },
  "api/AnthropicClient.Models.AutoToolChoice.html": {
    "href": "api/AnthropicClient.Models.AutoToolChoice.html",
    "title": "Class AutoToolChoice | AnthropicClient",
    "summary": "Class AutoToolChoice Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents the auto tool choice mode. public class AutoToolChoice : ToolChoice Inheritance object ToolChoice AutoToolChoice Inherited Members ToolChoice.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AutoToolChoice() Initializes a new instance of the AutoToolChoice class. public AutoToolChoice()"
  },
  "api/AnthropicClient.Models.BaseMessageRequest.html": {
    "href": "api/AnthropicClient.Models.BaseMessageRequest.html",
    "title": "Class BaseMessageRequest | AnthropicClient",
    "summary": "Class BaseMessageRequest Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a message request. public abstract class BaseMessageRequest Inheritance object BaseMessageRequest Derived MessageRequest StreamMessageRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseMessageRequest(string, List<Message>, int, string?, Dictionary<string, object>?, decimal, int?, decimal?, ToolChoice?, List<Tool>?, bool, List<string>?, List<TextContent>?) Initializes a new instance of the BaseMessageRequest class. protected BaseMessageRequest(string model, List<Message> messages, int maxTokens, string? system, Dictionary<string, object>? metadata, decimal temperature, int? topK, decimal? topP, ToolChoice? toolChoice, List<Tool>? tools, bool stream, List<string>? stopSequences, List<TextContent>? systemMessages) Parameters model string The model ID to use for the request. messages List<Message> The messages to send to the model. maxTokens int The maximum number of tokens to generate. system string The system prompt to use for the request. metadata Dictionary<string, object> The metadata to include with the request. temperature decimal The temperature to use for the request. topK int? The top-K value to use for the request. topP decimal? The top-P value to use for the request. toolChoice ToolChoice The tool choice mode to use for the request. tools List<Tool> The tools to use for the request. stream bool A value indicating whether the message should be streamed. stopSequences List<string> The prompt stop sequences. systemMessages List<TextContent> The system messages to use for the request. Exceptions ArgumentNullException Thrown when the model or messages is null. ArgumentException Thrown when the messages contain no messages. ArgumentException Thrown when the max tokens is less than one. ArgumentException Thrown when the temperature is less than zero or greater than one. Properties MaxTokens Gets the maximum number of tokens to generate. [JsonPropertyName(\"max_tokens\")] public int MaxTokens { get; init; } Property Value int Messages Gets the messages to send to the model. public List<Message> Messages { get; init; } Property Value List<Message> Metadata Gets the metadata to include with the request. public Dictionary<string, object>? Metadata { get; init; } Property Value Dictionary<string, object> Model Gets the model ID to use for the request. public string Model { get; init; } Property Value string StopSequences Gets the prompt stop sequences. [JsonPropertyName(\"stop_sequences\")] public List<string> StopSequences { get; init; } Property Value List<string> Stream Gets a value indicating whether the message should be streamed. public bool Stream { get; init; } Property Value bool System Gets the system message that will be used as the system prompt if no system messages are provided. [JsonIgnore] public string? System { get; init; } Property Value string SystemMessages Gets the system messages to send to the model to be used as the system prompt. [JsonIgnore] public List<TextContent>? SystemMessages { get; init; } Property Value List<TextContent> SystemPrompt Gets the system prompt that will be used for the request. If will return the system messages if they are provided, otherwise it will return the system message. If neither are provided, it will return null. [JsonPropertyName(\"system\")] public List<TextContent>? SystemPrompt { get; } Property Value List<TextContent> Temperature Gets the temperature to use for the request. public decimal Temperature { get; init; } Property Value decimal ToolChoice Gets the tool choice mode to use for the request. [JsonPropertyName(\"tool_choice\")] public ToolChoice? ToolChoice { get; init; } Property Value ToolChoice Tools Gets the tools to use for the request. public List<Tool>? Tools { get; init; } Property Value List<Tool> TopK Gets the top-K value to use for the request. public int? TopK { get; init; } Property Value int? TopP Gets the top-P value to use for the request. public decimal? TopP { get; init; } Property Value decimal?"
  },
  "api/AnthropicClient.Models.CacheControl.html": {
    "href": "api/AnthropicClient.Models.CacheControl.html",
    "title": "Class CacheControl | AnthropicClient",
    "summary": "Class CacheControl Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents the cache control to be used for content. public abstract class CacheControl Inheritance object CacheControl Derived EphemeralCacheControl Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CacheControl(string) Initializes a new instance of the CacheControl class. protected CacheControl(string type) Parameters type string The type of the cache control. Exceptions ArgumentException Thrown when the type is null or whitespace. Properties Type Gets the type of the cache control. public string Type { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.CacheControlType.html": {
    "href": "api/AnthropicClient.Models.CacheControlType.html",
    "title": "Class CacheControlType | AnthropicClient",
    "summary": "Class CacheControlType Namespace AnthropicClient.Models Assembly AnthropicClient.dll Provides constants for cache control types. public static class CacheControlType Inheritance object CacheControlType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Ephemeral The cache control type for an ephemeral cache. public const string Ephemeral = \"ephemeral\" Field Value string"
  },
  "api/AnthropicClient.Models.CanceledMessageBatchResult.html": {
    "href": "api/AnthropicClient.Models.CanceledMessageBatchResult.html",
    "title": "Class CanceledMessageBatchResult | AnthropicClient",
    "summary": "Class CanceledMessageBatchResult Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a message batch result that was cancelled. public class CanceledMessageBatchResult : MessageBatchResult Inheritance object MessageBatchResult CanceledMessageBatchResult Inherited Members MessageBatchResult.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CanceledMessageBatchResult() Initializes a new instance of the CanceledMessageBatchResult class. public CanceledMessageBatchResult()"
  },
  "api/AnthropicClient.Models.Content.html": {
    "href": "api/AnthropicClient.Models.Content.html",
    "title": "Class Content | AnthropicClient",
    "summary": "Class Content Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents part of the content of a message. public abstract class Content Inheritance object Content Derived DocumentContent ImageContent TextContent ToolResultContent ToolUseContent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Content(string) Initializes a new instance of the Content class. protected Content(string type) Parameters type string The type of the content. Content(string, CacheControl) Initializes a new instance of the Content class. protected Content(string type, CacheControl cacheControl) Parameters type string The type of the content. cacheControl CacheControl The cache control to be used for the content. Properties CacheControl Gets the cache control to be used for the content. [JsonPropertyName(\"cache_control\")] public CacheControl? CacheControl { get; set; } Property Value CacheControl Type Gets the type of the content. public string Type { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.ContentDelta.html": {
    "href": "api/AnthropicClient.Models.ContentDelta.html",
    "title": "Class ContentDelta | AnthropicClient",
    "summary": "Class ContentDelta Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a content delta. public abstract class ContentDelta Inheritance object ContentDelta Derived JsonDelta TextDelta Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ContentDelta(string) Initializes a new instance of the ContentDelta class. protected ContentDelta(string type) Parameters type string The type of the content delta. Properties Type Gets the type of the content delta. public string Type { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.ContentDeltaEventData.html": {
    "href": "api/AnthropicClient.Models.ContentDeltaEventData.html",
    "title": "Class ContentDeltaEventData | AnthropicClient",
    "summary": "Class ContentDeltaEventData Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents data for a content_block_delta event. public class ContentDeltaEventData : EventData Inheritance object EventData ContentDeltaEventData Inherited Members EventData.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ContentDeltaEventData(int, ContentDelta) Initializes a new instance of the ContentDeltaEventData class. public ContentDeltaEventData(int index, ContentDelta delta) Parameters index int The index of the content block. delta ContentDelta The content delta. Properties Delta Gets the content delta. public ContentDelta Delta { get; init; } Property Value ContentDelta Index Gets the index of the content block. public int Index { get; init; } Property Value int"
  },
  "api/AnthropicClient.Models.ContentDeltaType.html": {
    "href": "api/AnthropicClient.Models.ContentDeltaType.html",
    "title": "Class ContentDeltaType | AnthropicClient",
    "summary": "Class ContentDeltaType Namespace AnthropicClient.Models Assembly AnthropicClient.dll Provides constants for content delta types. public static class ContentDeltaType Inheritance object ContentDeltaType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields JsonDelta The input_json_delta. public const string JsonDelta = \"input_json_delta\" Field Value string TextDelta The text_delta. public const string TextDelta = \"text_delta\" Field Value string"
  },
  "api/AnthropicClient.Models.ContentStartEventData.html": {
    "href": "api/AnthropicClient.Models.ContentStartEventData.html",
    "title": "Class ContentStartEventData | AnthropicClient",
    "summary": "Class ContentStartEventData Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents data for a content_block_start event. public class ContentStartEventData : EventData Inheritance object EventData ContentStartEventData Inherited Members EventData.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ContentStartEventData(int, Content) Initializes a new instance of the ContentStartEventData class. public ContentStartEventData(int index, Content contentBlock) Parameters index int The index of the content block. contentBlock Content The content block. Properties ContentBlock Gets the content block. [JsonPropertyName(\"content_block\")] public Content ContentBlock { get; init; } Property Value Content Index Gets the index of the content block. public int Index { get; init; } Property Value int"
  },
  "api/AnthropicClient.Models.ContentStopEventData.html": {
    "href": "api/AnthropicClient.Models.ContentStopEventData.html",
    "title": "Class ContentStopEventData | AnthropicClient",
    "summary": "Class ContentStopEventData Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents data for a content_block_stop event. public class ContentStopEventData : EventData Inheritance object EventData ContentStopEventData Inherited Members EventData.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ContentStopEventData(int) Initializes a new instance of the ContentStopEventData class. public ContentStopEventData(int index) Parameters index int The index of the content block. Properties Index Gets the index of the content block. public int Index { get; init; } Property Value int"
  },
  "api/AnthropicClient.Models.ContentType.html": {
    "href": "api/AnthropicClient.Models.ContentType.html",
    "title": "Class ContentType | AnthropicClient",
    "summary": "Class ContentType Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents the content type. public static class ContentType Inheritance object ContentType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Document Represents the document content type. public const string Document = \"document\" Field Value string Image Represents the image content type. public const string Image = \"image\" Field Value string Text Represents the text content type. public const string Text = \"text\" Field Value string ToolResult Represents the tool result content type. public const string ToolResult = \"tool_result\" Field Value string ToolUse Represents the tool use content type. public const string ToolUse = \"tool_use\" Field Value string"
  },
  "api/AnthropicClient.Models.CountMessageTokensRequest.html": {
    "href": "api/AnthropicClient.Models.CountMessageTokensRequest.html",
    "title": "Class CountMessageTokensRequest | AnthropicClient",
    "summary": "Class CountMessageTokensRequest Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a request to count the number of tokens in a message. public class CountMessageTokensRequest Inheritance object CountMessageTokensRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CountMessageTokensRequest(string, List<Message>, ToolChoice?, List<Tool>?, List<TextContent>?) Initializes a new instance of the CountMessageTokensRequest class. public CountMessageTokensRequest(string model, List<Message> messages, ToolChoice? toolChoice = null, List<Tool>? tools = null, List<TextContent>? systemPrompt = null) Parameters model string The model ID to use for the request. messages List<Message> The messages to count the number of tokens in. toolChoice ToolChoice The tool choice mode to use for the request. tools List<Tool> The tools to use for the request. systemPrompt List<TextContent> The system prompt to use for the request. Exceptions ArgumentNullException Thrown when model or messages is null. ArgumentException Thrown when messages is empty. Properties Messages Gets the messages to count the number of tokens in. public List<Message> Messages { get; init; } Property Value List<Message> Model Gets the model ID to be used for the request. public string Model { get; init; } Property Value string SystemPrompt Gets the system prompt to use for the request. [JsonPropertyName(\"system\")] public List<TextContent>? SystemPrompt { get; init; } Property Value List<TextContent> ToolChoice Gets the tool choice mode to use for the request. [JsonPropertyName(\"tool_choice\")] public ToolChoice? ToolChoice { get; init; } Property Value ToolChoice Tools Gets the tools to use for the request. public List<Tool>? Tools { get; init; } Property Value List<Tool>"
  },
  "api/AnthropicClient.Models.DocumentContent.html": {
    "href": "api/AnthropicClient.Models.DocumentContent.html",
    "title": "Class DocumentContent | AnthropicClient",
    "summary": "Class DocumentContent Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents content from a document that is part of a message. public class DocumentContent : Content Inheritance object Content DocumentContent Inherited Members Content.Type Content.CacheControl object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DocumentContent(string, string) Initializes a new instance of the DocumentContent class. public DocumentContent(string mediaType, string data) Parameters mediaType string The media type of the document. data string The data of the document. Exceptions ArgumentNullException Thrown when the media type or data is null. DocumentContent(string, string, CacheControl) Initializes a new instance of the DocumentContent class. public DocumentContent(string mediaType, string data, CacheControl cacheControl) Parameters mediaType string The media type of the document. data string The data of the document. cacheControl CacheControl The cache control to be used for the content. Exceptions ArgumentNullException Thrown when the media type, data, or cache control is null. Properties Source Gets the source of the document. public DocumentSource Source { get; init; } Property Value DocumentSource"
  },
  "api/AnthropicClient.Models.DocumentSource.html": {
    "href": "api/AnthropicClient.Models.DocumentSource.html",
    "title": "Class DocumentSource | AnthropicClient",
    "summary": "Class DocumentSource Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a document source. public class DocumentSource Inheritance object DocumentSource Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DocumentSource(string, string) Initializes a new instance of the DocumentSource class. public DocumentSource(string mediaType, string data) Parameters mediaType string The media type of the document. data string The data of the document. Exceptions ArgumentException Thrown when the media type is invalid. ArgumentNullException Thrown when the media type or data is null. Properties Data Gets the data of the document. public string Data { get; init; } Property Value string MediaType Gets the media type of the document. [JsonPropertyName(\"media_type\")] public string MediaType { get; init; } Property Value string Type Gets the type of encoding of the document data. public string Type { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.EphemeralCacheControl.html": {
    "href": "api/AnthropicClient.Models.EphemeralCacheControl.html",
    "title": "Class EphemeralCacheControl | AnthropicClient",
    "summary": "Class EphemeralCacheControl Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents the cache control to be used for content. public class EphemeralCacheControl : CacheControl Inheritance object CacheControl EphemeralCacheControl Inherited Members CacheControl.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EphemeralCacheControl() Initializes a new instance of the EphemeralCacheControl class. public EphemeralCacheControl()"
  },
  "api/AnthropicClient.Models.Error.html": {
    "href": "api/AnthropicClient.Models.Error.html",
    "title": "Class Error | AnthropicClient",
    "summary": "Class Error Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents an error. public abstract class Error Inheritance object Error Derived ApiError AuthenticationError InvalidRequestError NotFoundError OverloadedError PermissionError RateLimitError Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Error(string) Initializes a new instance of the Error class. protected Error(string type) Parameters type string The type of the error. Properties Message Gets the message of the error. public string Message { get; init; } Property Value string Type Gets the type of the error. public string Type { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.ErrorEventData.html": {
    "href": "api/AnthropicClient.Models.ErrorEventData.html",
    "title": "Class ErrorEventData | AnthropicClient",
    "summary": "Class ErrorEventData Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents data for an error event. public class ErrorEventData : EventData Inheritance object EventData ErrorEventData Inherited Members EventData.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ErrorEventData(Error) Initializes a new instance of the ErrorEventData class. public ErrorEventData(Error error) Parameters error Error The error. Properties Error Gets the error. public Error Error { get; init; } Property Value Error"
  },
  "api/AnthropicClient.Models.ErrorType.html": {
    "href": "api/AnthropicClient.Models.ErrorType.html",
    "title": "Class ErrorType | AnthropicClient",
    "summary": "Class ErrorType Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents the error type. public class ErrorType Inheritance object ErrorType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ApiError Represents the api_error type. public const string ApiError = \"api_error\" Field Value string AuthenticationError Represents the authentication_error type. public const string AuthenticationError = \"authentication_error\" Field Value string InvalidRequestError Represents the invalid_request error type. public const string InvalidRequestError = \"invalid_request_error\" Field Value string NotFoundError Represents the not_found_error type. public const string NotFoundError = \"not_found_error\" Field Value string OverloadedError Represents the overloaded_error type. public const string OverloadedError = \"overloaded_error\" Field Value string PermissionError Represents the permission_error type. public const string PermissionError = \"permission_error\" Field Value string RateLimitError Represents the rate_limit_error type. public const string RateLimitError = \"rate_limit_error\" Field Value string"
  },
  "api/AnthropicClient.Models.ErroredMessageBatchResult.html": {
    "href": "api/AnthropicClient.Models.ErroredMessageBatchResult.html",
    "title": "Class ErroredMessageBatchResult | AnthropicClient",
    "summary": "Class ErroredMessageBatchResult Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a message batch result that contains an error response. public class ErroredMessageBatchResult : MessageBatchResult Inheritance object MessageBatchResult ErroredMessageBatchResult Inherited Members MessageBatchResult.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ErroredMessageBatchResult() Initializes a new instance of the ErroredMessageBatchResult class. public ErroredMessageBatchResult() Properties Error Gets the error of the message batch result. public AnthropicError Error { get; init; } Property Value AnthropicError"
  },
  "api/AnthropicClient.Models.EventData.html": {
    "href": "api/AnthropicClient.Models.EventData.html",
    "title": "Class EventData | AnthropicClient",
    "summary": "Class EventData Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents data for an event. public abstract class EventData Inheritance object EventData Derived ContentDeltaEventData ContentStartEventData ContentStopEventData ErrorEventData MessageCompleteEventData MessageDeltaEventData MessageStartEventData MessageStopEventData PingEventData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EventData(string) Initializes a new instance of the EventData class. protected EventData(string type) Parameters type string The type of the event. Properties Type Gets the type of the event. public string Type { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.EventType.html": {
    "href": "api/AnthropicClient.Models.EventType.html",
    "title": "Class EventType | AnthropicClient",
    "summary": "Class EventType Namespace AnthropicClient.Models Assembly AnthropicClient.dll Provides constants for event types. public static class EventType Inheritance object EventType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ContentBlockDelta Represents the content_block_delta event type. public const string ContentBlockDelta = \"content_block_delta\" Field Value string ContentBlockStart Represents the content_block_start event type. public const string ContentBlockStart = \"content_block_start\" Field Value string ContentBlockStop Represents the content_block_stop event type. public const string ContentBlockStop = \"content_block_stop\" Field Value string Error Represents the error event type. public const string Error = \"error\" Field Value string MessageComplete Represents the message_complete event type. public const string MessageComplete = \"message_complete\" Field Value string MessageDelta Represents the message_delta event type. public const string MessageDelta = \"message_delta\" Field Value string MessageStart Represents the message_start event type. public const string MessageStart = \"message_start\" Field Value string MessageStop Represents the message_stop event type. public const string MessageStop = \"message_stop\" Field Value string Ping Represents the ping event type. public const string Ping = \"ping\" Field Value string"
  },
  "api/AnthropicClient.Models.ExpiredMessageBatchResult.html": {
    "href": "api/AnthropicClient.Models.ExpiredMessageBatchResult.html",
    "title": "Class ExpiredMessageBatchResult | AnthropicClient",
    "summary": "Class ExpiredMessageBatchResult Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a message batch result that has expired. public class ExpiredMessageBatchResult : MessageBatchResult Inheritance object MessageBatchResult ExpiredMessageBatchResult Inherited Members MessageBatchResult.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExpiredMessageBatchResult() Initializes a new instance of the ExpiredMessageBatchResult class. public ExpiredMessageBatchResult()"
  },
  "api/AnthropicClient.Models.FunctionParameterAttribute.html": {
    "href": "api/AnthropicClient.Models.FunctionParameterAttribute.html",
    "title": "Class FunctionParameterAttribute | AnthropicClient",
    "summary": "Class FunctionParameterAttribute Namespace AnthropicClient.Models Assembly AnthropicClient.dll Attribute to describe a function parameter. [AttributeUsage(AttributeTargets.Parameter)] public sealed class FunctionParameterAttribute : Attribute Inheritance object Attribute FunctionParameterAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FunctionParameterAttribute(string, string, bool) Initializes a new instance of the FunctionParameterAttribute class. public FunctionParameterAttribute(string description, string name = \"\", bool required = false) Parameters description string The description of the parameter. name string The name of the parameter. required bool Whether the parameter is required. Properties Description The description of the parameter. public string Description { get; } Property Value string Name The name of the parameter. public string Name { get; } Property Value string Required Whether the parameter is required. public bool Required { get; } Property Value bool"
  },
  "api/AnthropicClient.Models.FunctionPropertyAttribute.html": {
    "href": "api/AnthropicClient.Models.FunctionPropertyAttribute.html",
    "title": "Class FunctionPropertyAttribute | AnthropicClient",
    "summary": "Class FunctionPropertyAttribute Namespace AnthropicClient.Models Assembly AnthropicClient.dll Attribute to describe a property of a type that is used as a function parameter. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class FunctionPropertyAttribute : Attribute Inheritance object Attribute FunctionPropertyAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FunctionPropertyAttribute(string, bool, object?, object[]?) Initializes a new instance of the FunctionPropertyAttribute class. public FunctionPropertyAttribute(string description, bool required = false, object? defaultValue = null, object[]? possibleValues = null) Parameters description string Description of the property. required bool Whether the property is required. defaultValue object Default value of the property. possibleValues object[] Possible values of the property. Properties DefaultValue Default value of the property. public object? DefaultValue { get; } Property Value object Description Description of the property. public string Description { get; } Property Value string PossibleValues Possible values of the property. public object[]? PossibleValues { get; } Property Value object[] Required Whether the property is required. public bool Required { get; } Property Value bool"
  },
  "api/AnthropicClient.Models.ITool.html": {
    "href": "api/AnthropicClient.Models.ITool.html",
    "title": "Interface ITool | AnthropicClient",
    "summary": "Interface ITool Namespace AnthropicClient.Models Assembly AnthropicClient.dll Interface that a class can implement to be used to create a tool. public interface ITool Properties Description Gets the description of the tool. Should not be null or empty. string Description { get; } Property Value string Function Gets the input schema of the tool. Should not be null. MethodInfo Function { get; } Property Value MethodInfo Name Gets the name of the tool. Should not be null or empty. string Name { get; } Property Value string"
  },
  "api/AnthropicClient.Models.ImageContent.html": {
    "href": "api/AnthropicClient.Models.ImageContent.html",
    "title": "Class ImageContent | AnthropicClient",
    "summary": "Class ImageContent Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents image content that is part of a message. public class ImageContent : Content Inheritance object Content ImageContent Inherited Members Content.Type Content.CacheControl object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ImageContent(string, string) Initializes a new instance of the ImageContent class. public ImageContent(string mediaType, string data) Parameters mediaType string The media type of the image. data string The data of the image. Exceptions ArgumentNullException Thrown when the media type or data is null. ImageContent(string, string, CacheControl) Initializes a new instance of the ImageContent class. public ImageContent(string mediaType, string data, CacheControl cacheControl) Parameters mediaType string The media type of the image. data string The data of the image. cacheControl CacheControl The cache control to be used for the content. Exceptions ArgumentNullException Thrown when the media type, data, or cache control is null. Properties Source Gets the source of the image. public ImageSource Source { get; init; } Property Value ImageSource"
  },
  "api/AnthropicClient.Models.ImageSource.html": {
    "href": "api/AnthropicClient.Models.ImageSource.html",
    "title": "Class ImageSource | AnthropicClient",
    "summary": "Class ImageSource Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents an image source. public class ImageSource Inheritance object ImageSource Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ImageSource(string, string) Initializes a new instance of the ImageSource class. public ImageSource(string mediaType, string data) Parameters mediaType string The media type of the image. data string The data of the image. Exceptions ArgumentException Thrown when the media type is invalid. ArgumentNullException Thrown when the media type or data is null. Properties Data Gets the data of the image. public string Data { get; init; } Property Value string MediaType Gets the media type of the image. [JsonPropertyName(\"media_type\")] public string MediaType { get; init; } Property Value string Type Gets the type of encoding of the image data. public string Type { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.ImageType.html": {
    "href": "api/AnthropicClient.Models.ImageType.html",
    "title": "Class ImageType | AnthropicClient",
    "summary": "Class ImageType Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents the image type. public static class ImageType Inheritance object ImageType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Gif Represents the GIF image type. public const string Gif = \"image/gif\" Field Value string Jpg Represents the JPEG image type. public const string Jpg = \"image/jpeg\" Field Value string Png Represents the PNG image type. public const string Png = \"image/png\" Field Value string Webp Represents the WebP image type. public const string Webp = \"image/webp\" Field Value string"
  },
  "api/AnthropicClient.Models.InputProperty.html": {
    "href": "api/AnthropicClient.Models.InputProperty.html",
    "title": "Class InputProperty | AnthropicClient",
    "summary": "Class InputProperty Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents an input property. public class InputProperty Inheritance object InputProperty Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InputProperty(string, string) Initializes a new instance of the InputProperty class. public InputProperty(string type, string description) Parameters type string The type of the input property. description string The description of the input property. Exceptions ArgumentNullException Thrown when the type or description is null. Properties Description Gets the description of the input property. public string Description { get; init; } Property Value string Type Gets the type of the input property. public string Type { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.InputSchema.html": {
    "href": "api/AnthropicClient.Models.InputSchema.html",
    "title": "Class InputSchema | AnthropicClient",
    "summary": "Class InputSchema Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents an input schema. public class InputSchema Inheritance object InputSchema Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InputSchema(Dictionary<string, InputProperty>, List<string>) Initializes a new instance of the InputSchema class. public InputSchema(Dictionary<string, InputProperty> properties, List<string> required) Parameters properties Dictionary<string, InputProperty> The properties of the input schema. required List<string> The required properties of the input schema. Exceptions ArgumentNullException Thrown when the properties or required is null. ArgumentException Thrown when the required properties are not present in the properties dictionary. Properties Properties Gets the properties of the input schema. public Dictionary<string, InputProperty> Properties { get; init; } Property Value Dictionary<string, InputProperty> Required Gets the required properties of the input schema. public List<string> Required { get; init; } Property Value List<string> Type Gets the type of the input schema. public string Type { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.InvalidRequestError.html": {
    "href": "api/AnthropicClient.Models.InvalidRequestError.html",
    "title": "Class InvalidRequestError | AnthropicClient",
    "summary": "Class InvalidRequestError Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents an invalid_request error. public class InvalidRequestError : Error Inheritance object Error InvalidRequestError Inherited Members Error.Type Error.Message object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InvalidRequestError(string) Initializes a new instance of the InvalidRequestError class. public InvalidRequestError(string message) Parameters message string The message of the error."
  },
  "api/AnthropicClient.Models.JsonDelta.html": {
    "href": "api/AnthropicClient.Models.JsonDelta.html",
    "title": "Class JsonDelta | AnthropicClient",
    "summary": "Class JsonDelta Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a JSON delta. public class JsonDelta : ContentDelta Inheritance object ContentDelta JsonDelta Inherited Members ContentDelta.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JsonDelta(string) Initializes a new instance of the JsonDelta class. public JsonDelta(string partialJson) Parameters partialJson string The partial JSON. Properties PartialJson Gets the partial JSON. [JsonPropertyName(\"partial_json\")] public string PartialJson { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.Message.html": {
    "href": "api/AnthropicClient.Models.Message.html",
    "title": "Class Message | AnthropicClient",
    "summary": "Class Message Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a message. public class Message Inheritance object Message Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Message(string, List<Content>) Initializes a new instance of the Message class. public Message(string role, List<Content> content) Parameters role string The role of the message. content List<Content> The contents of the message. Exceptions ArgumentException Thrown when the role is invalid. ArgumentNullException Thrown when the role or content is null. Properties Content Gets the contents of the message. public List<Content> Content { get; init; } Property Value List<Content> Role Gets the role of the message. public string Role { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.MessageBatchDeleteResponse.html": {
    "href": "api/AnthropicClient.Models.MessageBatchDeleteResponse.html",
    "title": "Class MessageBatchDeleteResponse | AnthropicClient",
    "summary": "Class MessageBatchDeleteResponse Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a message batch delete response. public class MessageBatchDeleteResponse Inheritance object MessageBatchDeleteResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id Gets the ID of the message batch that was deleted. public string Id { get; init; } Property Value string Type Gets the type of the message batch response. public string Type { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.MessageBatchRequest.html": {
    "href": "api/AnthropicClient.Models.MessageBatchRequest.html",
    "title": "Class MessageBatchRequest | AnthropicClient",
    "summary": "Class MessageBatchRequest Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a request to create a batch of messages. public class MessageBatchRequest Inheritance object MessageBatchRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageBatchRequest(List<MessageBatchRequestItem>) Initializes a new instance of the MessageBatchRequest class. public MessageBatchRequest(List<MessageBatchRequestItem> requests) Parameters requests List<MessageBatchRequestItem> The requests to create messages. Exceptions ArgumentException Thrown when requests is empty. Properties Requests Gets the requests to create messages. public List<MessageBatchRequestItem> Requests { get; init; } Property Value List<MessageBatchRequestItem>"
  },
  "api/AnthropicClient.Models.MessageBatchRequestCounts.html": {
    "href": "api/AnthropicClient.Models.MessageBatchRequestCounts.html",
    "title": "Class MessageBatchRequestCounts | AnthropicClient",
    "summary": "Class MessageBatchRequestCounts Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents the counts of requests in a batch of messages. public class MessageBatchRequestCounts Inheritance object MessageBatchRequestCounts Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Canceled Gets the number of requests in the batch that were cancelled. public int Canceled { get; init; } Property Value int Errored Gets the number of requests in the batch that errored. public int Errored { get; init; } Property Value int Expired Gets the number of requests in the batch that expired. public int Expired { get; init; } Property Value int Processing Gets the number of requests in the batch that are processing. public int Processing { get; init; } Property Value int Succeeded Gets the number of requests in the batch that succeeded. public int Succeeded { get; init; } Property Value int"
  },
  "api/AnthropicClient.Models.MessageBatchRequestItem.html": {
    "href": "api/AnthropicClient.Models.MessageBatchRequestItem.html",
    "title": "Class MessageBatchRequestItem | AnthropicClient",
    "summary": "Class MessageBatchRequestItem Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents an item in a batch of messages. public class MessageBatchRequestItem Inheritance object MessageBatchRequestItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageBatchRequestItem(string, MessageRequest) Initializes a new instance of the MessageBatchRequestItem class. public MessageBatchRequestItem(string customId, MessageRequest messageRequest) Parameters customId string The custom identifier for the message. messageRequest MessageRequest The message request parameters. Exceptions ArgumentException Thrown when customId is null or whitespace. ArgumentException Thrown when messageRequest is null. Properties CustomId Gets the custom identifier for the message. [JsonPropertyName(\"custom_id\")] public string CustomId { get; init; } Property Value string Params Gets the message request parameters. public MessageRequest Params { get; init; } Property Value MessageRequest"
  },
  "api/AnthropicClient.Models.MessageBatchResponse.html": {
    "href": "api/AnthropicClient.Models.MessageBatchResponse.html",
    "title": "Class MessageBatchResponse | AnthropicClient",
    "summary": "Class MessageBatchResponse Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a response to a batch of messages. public class MessageBatchResponse Inheritance object MessageBatchResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ArchivedAt Gets the date and time when the batch was archived. [JsonPropertyName(\"archived_at\")] public DateTimeOffset? ArchivedAt { get; init; } Property Value DateTimeOffset? CancelInitiatedAt Gets the date and time when the batch cancellation was initiated. [JsonPropertyName(\"cancel_initiated_at\")] public DateTimeOffset? CancelInitiatedAt { get; init; } Property Value DateTimeOffset? CreatedAt Gets the date and time when the batch was created. [JsonPropertyName(\"created_at\")] public DateTimeOffset CreatedAt { get; init; } Property Value DateTimeOffset EndedAt Gets the date and time when the batch ended. [JsonPropertyName(\"ended_at\")] public DateTimeOffset? EndedAt { get; init; } Property Value DateTimeOffset? ExpiresAt Gets the date and time when the batch expires. [JsonPropertyName(\"expires_at\")] public DateTimeOffset ExpiresAt { get; init; } Property Value DateTimeOffset Id Gets the identifier of the batch. public string Id { get; init; } Property Value string ProcessingStatus Gets the processing status of the batch. [JsonPropertyName(\"processing_status\")] public string ProcessingStatus { get; init; } Property Value string RequestCounts Gets the counts of requests in the batch. [JsonPropertyName(\"request_counts\")] public MessageBatchRequestCounts RequestCounts { get; init; } Property Value MessageBatchRequestCounts ResultsUrl Gets the URL to the results of the batch. [JsonPropertyName(\"results_url\")] public string? ResultsUrl { get; init; } Property Value string Type Gets the type of the batch. public string Type { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.MessageBatchResult.html": {
    "href": "api/AnthropicClient.Models.MessageBatchResult.html",
    "title": "Class MessageBatchResult | AnthropicClient",
    "summary": "Class MessageBatchResult Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a message batch result. public abstract class MessageBatchResult Inheritance object MessageBatchResult Derived CanceledMessageBatchResult ErroredMessageBatchResult ExpiredMessageBatchResult SucceededMessageBatchResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageBatchResult(string) Initializes a new instance of the MessageBatchResult class. public MessageBatchResult(string type) Parameters type string The type of the message batch result. Properties Type Gets the type of the message batch result. public string Type { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.MessageBatchResultItem.html": {
    "href": "api/AnthropicClient.Models.MessageBatchResultItem.html",
    "title": "Class MessageBatchResultItem | AnthropicClient",
    "summary": "Class MessageBatchResultItem Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a message batch result item. public class MessageBatchResultItem Inheritance object MessageBatchResultItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CustomId Gets the custom ID of the message batch result item. [JsonPropertyName(\"custom_id\")] public string CustomId { get; init; } Property Value string Result Gets the result of the message batch result item. public MessageBatchResult Result { get; init; } Property Value MessageBatchResult"
  },
  "api/AnthropicClient.Models.MessageBatchResultType.html": {
    "href": "api/AnthropicClient.Models.MessageBatchResultType.html",
    "title": "Class MessageBatchResultType | AnthropicClient",
    "summary": "Class MessageBatchResultType Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents the types of message batch results. public static class MessageBatchResultType Inheritance object MessageBatchResultType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Canceled Represents a canceled message batch result. public const string Canceled = \"canceled\" Field Value string Errored Represents an errored message batch result. public const string Errored = \"errored\" Field Value string Expired Represents an expired message batch result. public const string Expired = \"expired\" Field Value string Succeeded Represents a succeeded message batch result. public const string Succeeded = \"succeeded\" Field Value string"
  },
  "api/AnthropicClient.Models.MessageBatchStatus.html": {
    "href": "api/AnthropicClient.Models.MessageBatchStatus.html",
    "title": "Class MessageBatchStatus | AnthropicClient",
    "summary": "Class MessageBatchStatus Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents the status of a message batch. public static class MessageBatchStatus Inheritance object MessageBatchStatus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Canceling The status of a message batch that is being canceled. public const string Canceling = \"canceling\" Field Value string Ended The status of a message batch that has ended. public const string Ended = \"ended\" Field Value string InProgress The status of a message batch that is in progress. public const string InProgress = \"in_progress\" Field Value string"
  },
  "api/AnthropicClient.Models.MessageCompleteEventData.html": {
    "href": "api/AnthropicClient.Models.MessageCompleteEventData.html",
    "title": "Class MessageCompleteEventData | AnthropicClient",
    "summary": "Class MessageCompleteEventData Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents data for the message_complete event. public class MessageCompleteEventData : EventData Inheritance object EventData MessageCompleteEventData Inherited Members EventData.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageCompleteEventData(MessageResponse, AnthropicHeaders) Initializes a new instance of the MessageCompleteEventData class. public MessageCompleteEventData(MessageResponse message, AnthropicHeaders headers) Parameters message MessageResponse The response message. headers AnthropicHeaders The anthropic headers. Properties Headers Gets the anthropic headers. public AnthropicHeaders Headers { get; init; } Property Value AnthropicHeaders Message Gets the response message. public MessageResponse Message { get; init; } Property Value MessageResponse"
  },
  "api/AnthropicClient.Models.MessageDelta.html": {
    "href": "api/AnthropicClient.Models.MessageDelta.html",
    "title": "Class MessageDelta | AnthropicClient",
    "summary": "Class MessageDelta Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a message delta. public class MessageDelta Inheritance object MessageDelta Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageDelta(string, string) Initializes a new instance of the MessageDelta class. public MessageDelta(string stopReason, string stopSequence) Parameters stopReason string The stop reason. stopSequence string The stop sequence. Properties StopReason Gets the stop reason. [JsonPropertyName(\"stop_reason\")] public string StopReason { get; init; } Property Value string StopSequence Gets the stop sequence. [JsonPropertyName(\"stop_sequence\")] public string? StopSequence { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.MessageDeltaEventData.html": {
    "href": "api/AnthropicClient.Models.MessageDeltaEventData.html",
    "title": "Class MessageDeltaEventData | AnthropicClient",
    "summary": "Class MessageDeltaEventData Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents data for a message_delta event. public class MessageDeltaEventData : EventData Inheritance object EventData MessageDeltaEventData Inherited Members EventData.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageDeltaEventData(MessageDelta, Usage) Initializes a new instance of the MessageDeltaEventData class. public MessageDeltaEventData(MessageDelta delta, Usage usage) Parameters delta MessageDelta The message delta. usage Usage The usage. Properties Delta Gets the message delta. public MessageDelta Delta { get; init; } Property Value MessageDelta Usage Gets the usage. public Usage Usage { get; init; } Property Value Usage"
  },
  "api/AnthropicClient.Models.MessageRequest.html": {
    "href": "api/AnthropicClient.Models.MessageRequest.html",
    "title": "Class MessageRequest | AnthropicClient",
    "summary": "Class MessageRequest Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a message request. public class MessageRequest : BaseMessageRequest Inheritance object BaseMessageRequest MessageRequest Inherited Members BaseMessageRequest.Model BaseMessageRequest.System BaseMessageRequest.SystemMessages BaseMessageRequest.SystemPrompt BaseMessageRequest.Messages BaseMessageRequest.MaxTokens BaseMessageRequest.Metadata BaseMessageRequest.StopSequences BaseMessageRequest.Temperature BaseMessageRequest.TopK BaseMessageRequest.TopP BaseMessageRequest.ToolChoice BaseMessageRequest.Tools BaseMessageRequest.Stream object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageRequest(string, List<Message>, int, string?, Dictionary<string, object>?, decimal, int?, decimal?, ToolChoice?, List<Tool>?, List<string>?, List<TextContent>?) Initializes a new instance of the MessageRequest class. public MessageRequest(string model, List<Message> messages, int maxTokens = 1024, string? system = null, Dictionary<string, object>? metadata = null, decimal temperature = 0.0, int? topK = null, decimal? topP = null, ToolChoice? toolChoice = null, List<Tool>? tools = null, List<string>? stopSequences = null, List<TextContent>? systemMessages = null) Parameters model string The model ID to use for the request. messages List<Message> The messages to send to the model. maxTokens int The maximum number of tokens to generate. system string The system prompt to use for the request. metadata Dictionary<string, object> The metadata to include with the request. temperature decimal The temperature to use for the request. topK int? The top-K value to use for the request. topP decimal? The top-P value to use for the request. toolChoice ToolChoice The tool choice mode to use for the request. tools List<Tool> The tools to use for the request. stopSequences List<string> The prompt stop sequences. systemMessages List<TextContent> The system messages to include with the request. Exceptions ArgumentNullException Thrown when the model or messages is null. ArgumentException Thrown when the messages contain no messages. ArgumentException Thrown when the max tokens is less than one. ArgumentException Thrown when the temperature is less than zero or greater than one."
  },
  "api/AnthropicClient.Models.MessageResponse.html": {
    "href": "api/AnthropicClient.Models.MessageResponse.html",
    "title": "Class MessageResponse | AnthropicClient",
    "summary": "Class MessageResponse Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a response. public class MessageResponse Inheritance object MessageResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Content Gets the contents of the response. public List<Content> Content { get; init; } Property Value List<Content> Id Gets the ID of the response. public string Id { get; init; } Property Value string Model Gets the model used for the response. public string Model { get; init; } Property Value string Role Gets the role of the response. public string Role { get; init; } Property Value string StopReason Gets the stop reason of the response. [JsonPropertyName(\"stop_reason\")] public string? StopReason { get; init; } Property Value string StopSequence Gets the stop sequence of the response. [JsonPropertyName(\"stop_sequence\")] public string? StopSequence { get; init; } Property Value string ToolCall Gets the tool call of the response. If the response does not contain a tool call, this property is null. [JsonIgnore] public ToolCall? ToolCall { get; set; } Property Value ToolCall Type Gets the type of the response. public string Type { get; init; } Property Value string Usage Gets the usage of the response. public Usage Usage { get; init; } Property Value Usage"
  },
  "api/AnthropicClient.Models.MessageRole.html": {
    "href": "api/AnthropicClient.Models.MessageRole.html",
    "title": "Class MessageRole | AnthropicClient",
    "summary": "Class MessageRole Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents the message role. public static class MessageRole Inheritance object MessageRole Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Assistant Represents the assistant role. public const string Assistant = \"assistant\" Field Value string User Represents the user role. public const string User = \"user\" Field Value string"
  },
  "api/AnthropicClient.Models.MessageStartEventData.html": {
    "href": "api/AnthropicClient.Models.MessageStartEventData.html",
    "title": "Class MessageStartEventData | AnthropicClient",
    "summary": "Class MessageStartEventData Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents data for a message_start event. public class MessageStartEventData : EventData Inheritance object EventData MessageStartEventData Inherited Members EventData.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageStartEventData(MessageResponse) Initializes a new instance of the MessageStartEventData class. public MessageStartEventData(MessageResponse message) Parameters message MessageResponse The message. Properties Message Gets the message. public MessageResponse Message { get; init; } Property Value MessageResponse"
  },
  "api/AnthropicClient.Models.MessageStopEventData.html": {
    "href": "api/AnthropicClient.Models.MessageStopEventData.html",
    "title": "Class MessageStopEventData | AnthropicClient",
    "summary": "Class MessageStopEventData Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents data for a message_stop event. public class MessageStopEventData : EventData Inheritance object EventData MessageStopEventData Inherited Members EventData.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageStopEventData() Initializes a new instance of the MessageStopEventData class. public MessageStopEventData()"
  },
  "api/AnthropicClient.Models.NotFoundError.html": {
    "href": "api/AnthropicClient.Models.NotFoundError.html",
    "title": "Class NotFoundError | AnthropicClient",
    "summary": "Class NotFoundError Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a not_found error. public class NotFoundError : Error Inheritance object Error NotFoundError Inherited Members Error.Type Error.Message object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NotFoundError(string) Initializes a new instance of the NotFoundError class. public NotFoundError(string message) Parameters message string The message of the error."
  },
  "api/AnthropicClient.Models.OverloadedError.html": {
    "href": "api/AnthropicClient.Models.OverloadedError.html",
    "title": "Class OverloadedError | AnthropicClient",
    "summary": "Class OverloadedError Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents an overloaded error. public class OverloadedError : Error Inheritance object Error OverloadedError Inherited Members Error.Type Error.Message object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OverloadedError(string) Initializes a new instance of the OverloadedError class. public OverloadedError(string message) Parameters message string The message of the error."
  },
  "api/AnthropicClient.Models.Page-1.html": {
    "href": "api/AnthropicClient.Models.Page-1.html",
    "title": "Class Page<T> | AnthropicClient",
    "summary": "Class Page<T> Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a page with data. public class Page<T> : Page Type Parameters T Inheritance object Page Page<T> Inherited Members Page.FirstId Page.LastId Page.HasMore object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data The data in the page. public T[] Data { get; init; } Property Value T[]"
  },
  "api/AnthropicClient.Models.Page.html": {
    "href": "api/AnthropicClient.Models.Page.html",
    "title": "Class Page | AnthropicClient",
    "summary": "Class Page Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a page. public class Page Inheritance object Page Derived Page<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FirstId The id of the first item in the page. [JsonPropertyName(\"first_id\")] public string? FirstId { get; init; } Property Value string HasMore Indicates whether there is more data to be retrieved. [JsonPropertyName(\"has_more\")] public bool HasMore { get; init; } Property Value bool LastId The id of the last item in the page. [JsonPropertyName(\"last_id\")] public string? LastId { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.PagingRequest.html": {
    "href": "api/AnthropicClient.Models.PagingRequest.html",
    "title": "Class PagingRequest | AnthropicClient",
    "summary": "Class PagingRequest Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a request to page through a collection of items. public class PagingRequest Inheritance object PagingRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PagingRequest(string, string, int) Initializes a new instance of the PagingRequest class. public PagingRequest(string beforeId = \"\", string afterId = \"\", int limit = 20) Parameters beforeId string The ID of the item before which to start the page. afterId string The ID of the item after which to start the page. limit int The maximum number of items to return in the page. Exceptions ArgumentException Thrown when both beforeId and afterId are specified. ArgumentOutOfRangeException Thrown when limit is less than 1 or greater than 1000. Properties AfterId The ID of the item after which to start the page. [JsonPropertyName(\"after_id\")] public string AfterId { get; init; } Property Value string BeforeId The ID of the item before which to start the page. [JsonPropertyName(\"before_id\")] public string BeforeId { get; init; } Property Value string Limit The maximum number of items to return in the page. public int Limit { get; init; } Property Value int Methods ToQueryParameters() Converts the PagingRequest to a query string. public string ToQueryParameters() Returns string The query string representation of the PagingRequest."
  },
  "api/AnthropicClient.Models.PermissionError.html": {
    "href": "api/AnthropicClient.Models.PermissionError.html",
    "title": "Class PermissionError | AnthropicClient",
    "summary": "Class PermissionError Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a permission error. public class PermissionError : Error Inheritance object Error PermissionError Inherited Members Error.Type Error.Message object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PermissionError(string) Initializes a new instance of the PermissionError class. public PermissionError(string message) Parameters message string The message of the error."
  },
  "api/AnthropicClient.Models.PingEventData.html": {
    "href": "api/AnthropicClient.Models.PingEventData.html",
    "title": "Class PingEventData | AnthropicClient",
    "summary": "Class PingEventData Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents data for a ping event. public class PingEventData : EventData Inheritance object EventData PingEventData Inherited Members EventData.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PingEventData() Initializes a new instance of the PingEventData class. public PingEventData()"
  },
  "api/AnthropicClient.Models.RateLimitError.html": {
    "href": "api/AnthropicClient.Models.RateLimitError.html",
    "title": "Class RateLimitError | AnthropicClient",
    "summary": "Class RateLimitError Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a rate_limit error. public class RateLimitError : Error Inheritance object Error RateLimitError Inherited Members Error.Type Error.Message object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RateLimitError(string) Initializes a new instance of the RateLimitError class. public RateLimitError(string message) Parameters message string The message of the error."
  },
  "api/AnthropicClient.Models.SpecificToolChoice.html": {
    "href": "api/AnthropicClient.Models.SpecificToolChoice.html",
    "title": "Class SpecificToolChoice | AnthropicClient",
    "summary": "Class SpecificToolChoice Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents the specific tool choice mode. public class SpecificToolChoice : ToolChoice Inheritance object ToolChoice SpecificToolChoice Inherited Members ToolChoice.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SpecificToolChoice(string) Initializes a new instance of the SpecificToolChoice class. public SpecificToolChoice(string name) Parameters name string The name of the tool. Exceptions ArgumentNullException Thrown when the name is null. Properties Name Gets the name of the tool. public string Name { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.StopReasonType.html": {
    "href": "api/AnthropicClient.Models.StopReasonType.html",
    "title": "Class StopReasonType | AnthropicClient",
    "summary": "Class StopReasonType Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents the stop reason type. public static class StopReasonType Inheritance object StopReasonType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields EndTurn Represents the end_turn stop reason. public const string EndTurn = \"end_turn\" Field Value string MaxTokens Represents the max_tokens stop reason. public const string MaxTokens = \"max_tokens\" Field Value string StopSequence Represents the stop_sequence stop reason. public const string StopSequence = \"stop_sequence\" Field Value string ToolUse Represents the tool_use stop reason. public const string ToolUse = \"tool_use\" Field Value string"
  },
  "api/AnthropicClient.Models.StreamMessageRequest.html": {
    "href": "api/AnthropicClient.Models.StreamMessageRequest.html",
    "title": "Class StreamMessageRequest | AnthropicClient",
    "summary": "Class StreamMessageRequest Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a message request. public class StreamMessageRequest : BaseMessageRequest Inheritance object BaseMessageRequest StreamMessageRequest Inherited Members BaseMessageRequest.Model BaseMessageRequest.System BaseMessageRequest.SystemMessages BaseMessageRequest.SystemPrompt BaseMessageRequest.Messages BaseMessageRequest.MaxTokens BaseMessageRequest.Metadata BaseMessageRequest.StopSequences BaseMessageRequest.Temperature BaseMessageRequest.TopK BaseMessageRequest.TopP BaseMessageRequest.ToolChoice BaseMessageRequest.Tools BaseMessageRequest.Stream object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StreamMessageRequest(string, List<Message>, int, string?, Dictionary<string, object>?, decimal, int?, decimal?, ToolChoice?, List<Tool>?, List<string>?, List<TextContent>?) Initializes a new instance of the StreamMessageRequest class. public StreamMessageRequest(string model, List<Message> messages, int maxTokens = 1024, string? system = null, Dictionary<string, object>? metadata = null, decimal temperature = 0.0, int? topK = null, decimal? topP = null, ToolChoice? toolChoice = null, List<Tool>? tools = null, List<string>? stopSequences = null, List<TextContent>? systemMessages = null) Parameters model string The model ID to use for the request. messages List<Message> The messages to send to the model. maxTokens int The maximum number of tokens to generate. system string The system prompt to use for the request. metadata Dictionary<string, object> The metadata to include with the request. temperature decimal The temperature to use for the request. topK int? The top-K value to use for the request. topP decimal? The top-P value to use for the request. toolChoice ToolChoice The tool choice mode to use for the request. tools List<Tool> The tools to use for the request. stopSequences List<string> The prompt stop sequences. systemMessages List<TextContent> The system messages to include with the request. Exceptions ArgumentNullException Thrown when the model or messages is null. ArgumentException Thrown when the messages contain no messages. ArgumentException Thrown when the max tokens is less than one. ArgumentException Thrown when the temperature is less than zero or greater than one."
  },
  "api/AnthropicClient.Models.SucceededMessageBatchResult.html": {
    "href": "api/AnthropicClient.Models.SucceededMessageBatchResult.html",
    "title": "Class SucceededMessageBatchResult | AnthropicClient",
    "summary": "Class SucceededMessageBatchResult Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a message batch result that contains a message response. public class SucceededMessageBatchResult : MessageBatchResult Inheritance object MessageBatchResult SucceededMessageBatchResult Inherited Members MessageBatchResult.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SucceededMessageBatchResult() Initializes a new instance of the SucceededMessageBatchResult class. public SucceededMessageBatchResult() Properties Message Gets the message of the message batch result. public MessageResponse Message { get; init; } Property Value MessageResponse"
  },
  "api/AnthropicClient.Models.TextContent.html": {
    "href": "api/AnthropicClient.Models.TextContent.html",
    "title": "Class TextContent | AnthropicClient",
    "summary": "Class TextContent Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents text content that is part of a message. public class TextContent : Content Inheritance object Content TextContent Inherited Members Content.Type Content.CacheControl object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextContent(string) Initializes a new instance of the TextContent class. public TextContent(string text) Parameters text string The text of the content. Exceptions ArgumentNullException Thrown when the text is null. TextContent(string, CacheControl) Initializes a new instance of the TextContent class. public TextContent(string text, CacheControl cacheControl) Parameters text string The text of the content. cacheControl CacheControl The cache control to be used for the content. Exceptions ArgumentNullException Thrown when the text or cache control is null. Properties Text Gets the text of the content. public string Text { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.TextDelta.html": {
    "href": "api/AnthropicClient.Models.TextDelta.html",
    "title": "Class TextDelta | AnthropicClient",
    "summary": "Class TextDelta Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a text delta. public class TextDelta : ContentDelta Inheritance object ContentDelta TextDelta Inherited Members ContentDelta.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextDelta(string) Initializes a new instance of the TextDelta class. public TextDelta(string text) Parameters text string The text. Properties Text Gets the text. public string Text { get; set; } Property Value string"
  },
  "api/AnthropicClient.Models.TokenCountResponse.html": {
    "href": "api/AnthropicClient.Models.TokenCountResponse.html",
    "title": "Class TokenCountResponse | AnthropicClient",
    "summary": "Class TokenCountResponse Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a response to a token count request. public class TokenCountResponse Inheritance object TokenCountResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties InputTokens The number of input tokens counted. [JsonPropertyName(\"input_tokens\")] public int InputTokens { get; init; } Property Value int"
  },
  "api/AnthropicClient.Models.Tool.html": {
    "href": "api/AnthropicClient.Models.Tool.html",
    "title": "Class Tool | AnthropicClient",
    "summary": "Class Tool Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a tool that can be used. public class Tool Inheritance object Tool Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CacheControl Gets or sets the cache control to be used for the tool. [JsonPropertyName(\"cache_control\")] public CacheControl? CacheControl { get; set; } Property Value CacheControl Description Gets the description of the tool. public string Description { get; } Property Value string DisplayName Gets the display name of the tool. [JsonIgnore] public string DisplayName { get; } Property Value string Function Gets the function of the tool. [JsonIgnore] public AnthropicFunction Function { get; } Property Value AnthropicFunction InputSchema Gets the input schema of the tool. [JsonPropertyName(\"input_schema\")] public JsonObject InputSchema { get; } Property Value JsonObject Name Gets the name of the tool. This name will conform to the Anthropic tool naming rules. public string Name { get; } Property Value string Methods CreateFromClass<T>(CacheControl?) Creates a tool from a type that implements ITool. public static Tool CreateFromClass<T>(CacheControl? cacheControl = null) where T : ITool, new() Parameters cacheControl CacheControl Returns Tool The created tool as instance of Tool. Type Parameters T The type that implements ITool. Remarks The implementation of ITool must have a parameterless constructor. Exceptions ArgumentException Thrown when the name or description of the tool is null or empty. ArgumentNullException Thrown when the function of the tool is null. CreateFromFunction<TResult>(string, string, Func<TResult>, CacheControl?) Creates a tool from a function. public static Tool CreateFromFunction<TResult>(string name, string description, Func<TResult> func, CacheControl? cacheControl = null) Parameters name string The name of the tool. description string The description of the tool. func Func<TResult> The function. cacheControl CacheControl The cache control to be used for the tool. Returns Tool The created tool as instance of Tool. Type Parameters TResult The type of the result for the delegate. Remarks The name of the tool will be sanitized to conform to the Anthropic tool naming rules. Exceptions ArgumentNullException Thrown when func is null. CreateFromFunction<T1, TResult>(string, string, Func<T1, TResult>, CacheControl?) Creates a tool from a function. public static Tool CreateFromFunction<T1, TResult>(string name, string description, Func<T1, TResult> func, CacheControl? cacheControl = null) Parameters name string The name of the tool. description string The description of the tool. func Func<T1, TResult> The function. cacheControl CacheControl The cache control to be used for the tool. Returns Tool The created tool as instance of Tool. Type Parameters T1 The type of the first parameter for the delegate. TResult The type of the result for the delegate. Remarks The name of the tool will be sanitized to conform to the Anthropic tool naming rules. Exceptions ArgumentNullException Thrown when func is null. CreateFromFunction<T1, T2, TResult>(string, string, Func<T1, T2, TResult>, CacheControl?) Creates a tool from a function. public static Tool CreateFromFunction<T1, T2, TResult>(string name, string description, Func<T1, T2, TResult> func, CacheControl? cacheControl = null) Parameters name string The name of the tool. description string The description of the tool. func Func<T1, T2, TResult> The function. cacheControl CacheControl The cache control to be used for the tool. Returns Tool The created tool as instance of Tool. Type Parameters T1 The type of the first parameter for the delegate. T2 The type of the second parameter for the delegate. TResult The type of the result for the delegate. Remarks The name of the tool will be sanitized to conform to the Anthropic tool naming rules. Exceptions ArgumentNullException Thrown when func is null. CreateFromInstanceMethod(string, string, object, string, CacheControl?) Creates a tool from an instance method. public static Tool CreateFromInstanceMethod(string name, string description, object instance, string methodName, CacheControl? cacheControl = null) Parameters name string The name of the tool. description string The description of the tool. instance object The instance that contains the method. methodName string The name of the method. cacheControl CacheControl The cache control to be used for the tool. Returns Tool The created tool as instance of Tool. Remarks The name of the tool will be sanitized to conform to the Anthropic tool naming rules. Exceptions ArgumentException Thrown when methodName is null or empty. ArgumentNullException Thrown when instance is null. ArgumentException Thrown when methodName is not found in the type of instance. CreateFromStaticMethod(string, string, Type, string, CacheControl?) Creates a tool from a static method. public static Tool CreateFromStaticMethod(string name, string description, Type type, string methodName, CacheControl? cacheControl = null) Parameters name string The name of the tool. description string The description of the tool. type Type The type that contains the method. methodName string The name of the method. cacheControl CacheControl The cache control to be used for the tool. Returns Tool The created tool as instance of Tool. Remarks The name of the tool will be sanitized to conform to the Anthropic tool naming rules. Exceptions ArgumentException Thrown when methodName is null or empty. ArgumentNullException Thrown when type is null. ArgumentException Thrown when the method is not found in the type."
  },
  "api/AnthropicClient.Models.ToolCall.html": {
    "href": "api/AnthropicClient.Models.ToolCall.html",
    "title": "Class ToolCall | AnthropicClient",
    "summary": "Class ToolCall Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a tool call. public class ToolCall Inheritance object ToolCall Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ToolCall(Tool, ToolUseContent) Initializes a new instance of the ToolCall class. public ToolCall(Tool tool, ToolUseContent toolUse) Parameters tool Tool The tool of the tool call. toolUse ToolUseContent The tool use of the tool call. Properties Tool Gets the tool of the tool call. public Tool Tool { get; } Property Value Tool ToolUse Gets the tool use of the tool call. public ToolUseContent ToolUse { get; } Property Value ToolUseContent Methods InvokeAsync() Invokes the tool call. public Task<ToolCallResult<object>> InvokeAsync() Returns Task<ToolCallResult<object>> The result of the tool call as an instance of ToolCallResult<T>. InvokeAsync<T>() Invokes the tool call. public Task<ToolCallResult<T>> InvokeAsync<T>() Returns Task<ToolCallResult<T>> The result of the tool call as an instance of ToolCallResult<T>. Type Parameters T The type of the result value. Exceptions ArgumentException Thrown when a parameter name is not found. ArgumentException Thrown when an argument is missing."
  },
  "api/AnthropicClient.Models.ToolCallResult-1.html": {
    "href": "api/AnthropicClient.Models.ToolCallResult-1.html",
    "title": "Class ToolCallResult<T> | AnthropicClient",
    "summary": "Class ToolCallResult<T> Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a tool call result. public class ToolCallResult<T> Type Parameters T Inheritance object ToolCallResult<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ToolCallResult(T?, Exception, bool) Initializes a new instance of the ToolCallResult<T> class. protected ToolCallResult(T? value, Exception error, bool isSuccess) Parameters value T The value of the tool call result. error Exception The error of the tool call result. isSuccess bool Indicates whether the tool call was successful. Properties Error The error of the tool call result. public Exception Error { get; } Property Value Exception Exceptions InvalidOperationException Thrown when the result is successful. IsFailure Indicates whether the tool call failed. public bool IsFailure { get; } Property Value bool IsSuccess Indicates whether the tool call was successful. public bool IsSuccess { get; } Property Value bool Value The value of the tool call result. Can be null if the call failed, the call was successful but the return type is void or Task, or the call was successful but the return value is null public T? Value { get; } Property Value T Exceptions InvalidOperationException Thrown when the result is not successful. Methods Failure(Exception) Creates a failed ool call result. public static ToolCallResult<T> Failure(Exception error) Parameters error Exception The error of the tool call result. Returns ToolCallResult<T> A new instance of the ToolCallResult<T> class. Success(T?) Creates a successful tool call result. public static ToolCallResult<T> Success(T? value) Parameters value T The value of the tool call result. Returns ToolCallResult<T> A new instance of the ToolCallResult<T> class."
  },
  "api/AnthropicClient.Models.ToolChoice.html": {
    "href": "api/AnthropicClient.Models.ToolChoice.html",
    "title": "Class ToolChoice | AnthropicClient",
    "summary": "Class ToolChoice Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents a tool choice mode. public abstract class ToolChoice Inheritance object ToolChoice Derived AnyToolChoice AutoToolChoice SpecificToolChoice Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ToolChoice(string) Initializes a new instance of the ToolChoice class. protected ToolChoice(string type) Parameters type string The type of the tool choice. Properties Type Gets the type of the tool choice. public string Type { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.ToolChoiceType.html": {
    "href": "api/AnthropicClient.Models.ToolChoiceType.html",
    "title": "Class ToolChoiceType | AnthropicClient",
    "summary": "Class ToolChoiceType Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents the tool choice type. public class ToolChoiceType Inheritance object ToolChoiceType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Any Represents the any tool choice type. public const string Any = \"any\" Field Value string Auto Represents the auto tool choice type. public const string Auto = \"auto\" Field Value string Tool Represents the specific tool choice type. public const string Tool = \"tool\" Field Value string"
  },
  "api/AnthropicClient.Models.ToolResultContent.html": {
    "href": "api/AnthropicClient.Models.ToolResultContent.html",
    "title": "Class ToolResultContent | AnthropicClient",
    "summary": "Class ToolResultContent Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents tool result content that is part of a message. public class ToolResultContent : Content Inheritance object Content ToolResultContent Inherited Members Content.Type Content.CacheControl object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ToolResultContent(string, string) Initializes a new instance of the ToolResultContent class. public ToolResultContent(string toolUseId, string content) Parameters toolUseId string The tool use ID of the content. content string The content of the tool result. Exceptions ArgumentNullException Thrown when the tool use ID or content is null. ToolResultContent(string, string, CacheControl) Initializes a new instance of the ToolResultContent class. public ToolResultContent(string toolUseId, string content, CacheControl cacheControl) Parameters toolUseId string The tool use ID of the content. content string The content of the tool result. cacheControl CacheControl The cache control to be used for the content. Exceptions ArgumentNullException Thrown when the tool use ID or content is null. Properties Content Gets the content of the tool result. public string Content { get; init; } Property Value string ToolUseId Gets the tool use ID of the content. [JsonPropertyName(\"tool_use_id\")] public string ToolUseId { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.ToolUseContent.html": {
    "href": "api/AnthropicClient.Models.ToolUseContent.html",
    "title": "Class ToolUseContent | AnthropicClient",
    "summary": "Class ToolUseContent Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents tool use content that is part of a message. public class ToolUseContent : Content Inheritance object Content ToolUseContent Inherited Members Content.Type Content.CacheControl object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ToolUseContent() Initializes a new instance of the ToolUseContent class. public ToolUseContent() Properties Id Gets the ID of the tool use. public string Id { get; init; } Property Value string Input Gets the input of the tool. public Dictionary<string, object?> Input { get; init; } Property Value Dictionary<string, object> Name Gets the name of the tool. public string Name { get; init; } Property Value string"
  },
  "api/AnthropicClient.Models.Usage.html": {
    "href": "api/AnthropicClient.Models.Usage.html",
    "title": "Class Usage | AnthropicClient",
    "summary": "Class Usage Namespace AnthropicClient.Models Assembly AnthropicClient.dll Represents the usage of a response. public class Usage Inheritance object Usage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CacheCreationInputTokens Gets the number of tokens written to the cache when creating a new entry [JsonPropertyName(\"cache_creation_input_tokens\")] public int CacheCreationInputTokens { get; init; } Property Value int CacheReadInputTokens Gets the number of tokens retrieved from the cache for the request. [JsonPropertyName(\"cache_read_input_tokens\")] public int CacheReadInputTokens { get; init; } Property Value int InputTokens Gets the number of input tokens used. [JsonPropertyName(\"input_tokens\")] public int InputTokens { get; init; } Property Value int OutputTokens Gets the number of output tokens used. [JsonPropertyName(\"output_tokens\")] public int OutputTokens { get; init; } Property Value int"
  },
  "api/AnthropicClient.Models.html": {
    "href": "api/AnthropicClient.Models.html",
    "title": "Namespace AnthropicClient.Models | AnthropicClient",
    "summary": "Namespace AnthropicClient.Models Classes AnthropicError Represents an error response from the Anthropic API. AnthropicEvent Represents an event from the Anthropic API. AnthropicFunction Represents a function that can be provided as a tool. AnthropicHeaders Represents headers included in Anthropic API responses. AnthropicModel Represents an Anthropic model. AnthropicModels Provides constants for the Anthropic models. AnyToolChoice Represents the any tool choice mode. ApiError Represents an api_error response from the Anthropic API. AuthenticationError Represents an authentication_error response from the Anthropic API. AutoToolChoice Represents the auto tool choice mode. BaseMessageRequest Represents a message request. CacheControl Represents the cache control to be used for content. CacheControlType Provides constants for cache control types. CanceledMessageBatchResult Represents a message batch result that was cancelled. Content Represents part of the content of a message. ContentDelta Represents a content delta. ContentDeltaEventData Represents data for a content_block_delta event. ContentDeltaType Provides constants for content delta types. ContentStartEventData Represents data for a content_block_start event. ContentStopEventData Represents data for a content_block_stop event. ContentType Represents the content type. CountMessageTokensRequest Represents a request to count the number of tokens in a message. DocumentContent Represents content from a document that is part of a message. DocumentSource Represents a document source. EphemeralCacheControl Represents the cache control to be used for content. Error Represents an error. ErrorEventData Represents data for an error event. ErrorType Represents the error type. ErroredMessageBatchResult Represents a message batch result that contains an error response. EventData Represents data for an event. EventType Provides constants for event types. ExpiredMessageBatchResult Represents a message batch result that has expired. FunctionParameterAttribute Attribute to describe a function parameter. FunctionPropertyAttribute Attribute to describe a property of a type that is used as a function parameter. ImageContent Represents image content that is part of a message. ImageSource Represents an image source. ImageType Represents the image type. InputProperty Represents an input property. InputSchema Represents an input schema. InvalidRequestError Represents an invalid_request error. JsonDelta Represents a JSON delta. Message Represents a message. MessageBatchDeleteResponse Represents a message batch delete response. MessageBatchRequest Represents a request to create a batch of messages. MessageBatchRequestCounts Represents the counts of requests in a batch of messages. MessageBatchRequestItem Represents an item in a batch of messages. MessageBatchResponse Represents a response to a batch of messages. MessageBatchResult Represents a message batch result. MessageBatchResultItem Represents a message batch result item. MessageBatchResultType Represents the types of message batch results. MessageBatchStatus Represents the status of a message batch. MessageCompleteEventData Represents data for the message_complete event. MessageDelta Represents a message delta. MessageDeltaEventData Represents data for a message_delta event. MessageRequest Represents a message request. MessageResponse Represents a response. MessageRole Represents the message role. MessageStartEventData Represents data for a message_start event. MessageStopEventData Represents data for a message_stop event. NotFoundError Represents a not_found error. OverloadedError Represents an overloaded error. Page Represents a page. Page<T> Represents a page with data. PagingRequest Represents a request to page through a collection of items. PermissionError Represents a permission error. PingEventData Represents data for a ping event. RateLimitError Represents a rate_limit error. SpecificToolChoice Represents the specific tool choice mode. StopReasonType Represents the stop reason type. StreamMessageRequest Represents a message request. SucceededMessageBatchResult Represents a message batch result that contains a message response. TextContent Represents text content that is part of a message. TextDelta Represents a text delta. TokenCountResponse Represents a response to a token count request. Tool Represents a tool that can be used. ToolCall Represents a tool call. ToolCallResult<T> Represents a tool call result. ToolChoice Represents a tool choice mode. ToolChoiceType Represents the tool choice type. ToolResultContent Represents tool result content that is part of a message. ToolUseContent Represents tool use content that is part of a message. Usage Represents the usage of a response. Interfaces ITool Interface that a class can implement to be used to create a tool."
  },
  "api/AnthropicClient.html": {
    "href": "api/AnthropicClient.html",
    "title": "Namespace AnthropicClient | AnthropicClient",
    "summary": "Namespace AnthropicClient Classes AnthropicApiClient Represents a client for interacting with the Anthropic API. Interfaces IAnthropicApiClient Represents a client for interacting with the Anthropic API."
  },
  "index.html": {
    "href": "index.html",
    "title": "AnthropicClient | AnthropicClient",
    "summary": "AnthropicClient This library for the Anthropic API is meant to simplify development in C# for Anthropic users. Note This is an unofficial SDK for the Anthropic API. It was not built in consultation with Anthropic or any member of their organization. This SDK was developed independently using existing libraries and the Anthropic API documentation as the starting point with the intention of making development of integrations done in C# with Anthropic quicker and more convenient. Note This client library is heavily inspired by the Anthropic.SDK library. I chose to create a new library because I wanted to handle streaming and tool calling differently as well as have control over the client library as I plan to use it to build a connector for SemanticKernel. However if you are looking for a client library the Anthropic.SDK is a great place to start. \uD83D\uDCDD Issues If you encounter any issues while using this library please open an issue here. \uD83D\uDCDC License This library is licensed under the MIT License and is free to use and modify. \uD83D\uDCDD Contributing If you would like to contribute to this library please open a pull request here. \uD83D\uDEE0️ Dependencies Microsoft.Bcl.AsyncInterfaces Used to support async interfaces when streaming messages System.Text.Json Used for JSON serialization and deserialization \uD83D\uDCBE Installation Install the package from NuGet using the following command: dotnet add package AnthropicClient \uD83D\uDD11 API Key In order to use the Anthropic API you will need an API key. You can get one by signing up at Anthropic. Please keep your API key secure and do not share it with others. Be mindful of where you store your API key and do not commit it to a public repository. \uD83D\uDC68\uD83C\uDFFB‍\uD83D\uDCBB Start Coding AnthropicApiClient The most common way to use the SDK is to create an AnthropicApiClient instance and call its methods. Its constructor requires two parameters: apiKey - your Anthropic API key httpClient - an HttpClient instance. You can configure and customize the HttpClient instance as needed. This library however will perform the necessary configuration to work with the Anthropic API. Such as setting the base address and adding the proper headers. Note This library does not manage the lifecycle of the HttpClient instance. You should create and manage the lifecycle of the HttpClient instance in your application. It is best practice to read the API key from a secure location such as a configuration file or environment variable. For example using the appsettings.json file: { \"AnthropicApiKey\": \"YOUR_API\" } Example constructing an AnthropicApiClient instance: using AnthropicClient; using Microsoft.Extensions.Configuration; var configuration = new ConfigurationBuilder() .AddJsonFile(\"appsettings.json\") .Build(); var apiKey = configuration[\"AnthropicApiKey\"]; var client = new AnthropicApiClient(apiKey, new HttpClient()); IAnthropicApiClient The library does expose an interface IAnthropicApiClient that can be used for dependency injection and testing. The interface is implemented by the AnthropicApiClient class. Full API Documentation This library was developed to make using the Anthropic API easier within a .NET application. If you are looking for the full API documentation you can find it at Anthropic API Documentation. Usage The primary use case for working with the Anthropic API is to create a message in response to a request that includes one or more other messages. The created message can then be received either as a complete response or a stream of events. This can be used to create a conversation between the caller and Anthropic's AI models and/or to use Anthropic's AI models to perform a task. Note The following examples assume that you have already created an instance of the AnthropicApiClient class named client. You can also find these snippets in the examples directory. Count Message Tokens The AnthropicApiClient exposes a method named CountMessageTokensAsync that can be used to count the number of tokens in a message. The method requires a CountMessageTokensRequest instance as a parameter. using AnthropicClient; using AnthropicClient.Models; var response = await client.CountMessageTokensAsync(new CountMessageTokensRequest( AnthropicModels.Claude3Haiku, [ new( MessageRole.User, [new TextContent(\"Please write a haiku about the ocean.\")] ) ] )); if (response.IsFailure) { Console.WriteLine(\"Failed to count message tokens\"); Console.WriteLine(\"Error Type: {0}\", response.Error.Error.Type); Console.WriteLine(\"Error Message: {0}\", response.Error.Error.Message); return; } Console.WriteLine(\"Token Count: {0}\", response.Value.InputTokens); List Models The AnthropicApiClient exposes a method named ListModelsAsync that can be used to list the available models. The method takes an optional PagingRequest instance as a parameter. using AnthropicClient; var response = await client.ListModelsAsync(); if (response.IsFailure) { Console.WriteLine(\"Failed to list models\"); Console.WriteLine(\"Error Type: {0}\", response.Error.Error.Type); Console.WriteLine(\"Error Message: {0}\", response.Error.Error.Message); return; } foreach (var model in response.Value.Data) { Console.WriteLine(\"Model Id: {0}\", model.Id); Console.WriteLine(\"Model Name: {0}\", model.DisplayName); } Using the PagingRequest instance allows you to specify the number of models to return and the page of models to return. using AnthropicClient; using AnthropicClient.Models; var response = await client.ListModelsAsync(new PagingRequest(afterId: \"claude-3-5-sonnet-20241022\", limit: 2)); if (response.IsFailure) { Console.WriteLine(\"Failed to list models\"); Console.WriteLine(\"Error Type: {0}\", response.Error.Error.Type); Console.WriteLine(\"Error Message: {0}\", response.Error.Error.Message); return; } foreach (var model in response.Value.Data) { Console.WriteLine(\"Model Id: {0}\", model.Id); Console.WriteLine(\"Model Name: {0}\", model.DisplayName); } Get Model The AnthropicApiClient exposes a method named GetModelAsync that can be used to get a model by its id. using AnthropicClient; var response = await client.GetModelAsync(\"claude-3-5-sonnet-20241022\"); if (response.IsFailure) { Console.WriteLine(\"Failed to get model\"); Console.WriteLine(\"Error Type: {0}\", response.Error.Error.Type); Console.WriteLine(\"Error Message: {0}\", response.Error.Error.Message); return; } Console.WriteLine(\"Model Id: {0}\", response.Value.Id); Create a message The AnthropicApiClient exposes a method named CreateMessageAsync that can be used to create a message. The method requires a MessageRequest or a StreamMessageRequest instance as a parameter. The MessageRequest class is used to create a message whose response is not streamed and the StreamMessageRequest class is used to create a message whose response is streamed. The MessageRequest instance's properties can be set to configure how the message is created. Non-Streaming using AnthropicClient; using AnthropicClient.Models; var response = await client.CreateMessageAsync(new MessageRequest( AnthropicModels.Claude3Haiku, [ new( MessageRole.User, [new TextContent(\"Please write a haiku about the ocean.\")] ) ] )); if (response.IsSuccess is false) { Console.WriteLine(\"Failed to create message\"); Console.WriteLine(\"Error Type: {0}\", response.Error.Error.Type); Console.WriteLine(\"Error Message: {0}\", response.Error.Error.Message); return; } foreach (var content in response.Value.Content) { switch (content) { case TextContent textContent: Console.WriteLine(textContent.Text); break; } } Streaming Anthropic uses Server-Sent Events (SSE) to stream messages. The possible events and the format of those events are documented in the Anthropic API Documentation. This library provides a way to consume them after they have been deserialized into strongly-typed C# objects that are returned in an IAsyncEnumerable collection. This allows you to consume the events as they are received and process them in the way that best fits your use case. The following example demonstrates how to consume the streamed events and build up the complete text response from the model. using AnthropicClient; using AnthropicClient.Models; var events = client.CreateMessageAsync(new StreamMessageRequest( AnthropicModels.Claude3Haiku, [ new( MessageRole.User, [new TextContent(\"Please write a haiku about the ocean.\")] ) ] )); var msgBuilder = new StringBuilder(); await foreach (var e in events) { switch (e.Data) { case var data when data is ContentDeltaEventData contentData: switch (contentData.Delta) { case var delta when delta is TextDelta textDelta: msgBuilder.Append(textDelta.Text); break; } break; } } Console.WriteLine(msgBuilder.ToString()); Message Complete Event This library also provides a custom message_complete event that is yielded when all the message's events have been received. This event is not part of Anthropic's SSE events but is provided to allow for easier consumption of the entire message response if desired and make it easier to implement built-in tool calling. using AnthropicClient; using AnthropicClient.Models; var events = client.CreateMessageAsync(new StreamMessageRequest( AnthropicModels.Claude3Haiku, [ new( MessageRole.User, [new TextContent(\"Please write a haiku about the ocean.\")] ) ] )); MessageResponse? response = null; await foreach (var e in events) { switch (e.Data) { case var data when data is MessageCompleteEventData msgData: response = msgData.Message; break; } } var textContent = response?.Content .OfType<TextContent>() .Aggregate(new StringBuilder(), (sb, c) => sb.Append(c.Text)) .ToString(); Console.WriteLine(textContent); Tool Use Anthropic's models support the use of tools to perform tasks. This allows the models to interact with external client-side tools that can perform actions the models cannot do natively. This gives you the ability to further extend the model's abilities with your own custom tools. This feature is covered in depth in Anthropic's API Documentation. This library aims to make using tools convenient by allowing you to create, provide, and call tools from within your application by leveraging the reflection capabilities of C#. Note All tools are user provided. The models do no not have access to any built-in server-side tools. Create a tool You can create a tool in 4 different ways and then provide that tool when creating a message. Create a tool from a class Create a tool from a static method Create a tool from an instance method Create a tool from a delegate Create a tool from a class When creating a tool from a class the class must implement the ITool interface. using AnthropicClient.Models; class GetWeatherTool : ITool { public string Name => \"Get Weather\"; public string Description => \"Get the weather for a location in the specified units\"; public MethodInfo Function => typeof(GetWeatherTool).GetMethod(nameof(GetWeather))!; public static string GetWeather(string location, string units) { return $\"The weather in {location} is 72 degrees {units}\"; } } var getWeatherTool = Tool.CreateFromClass<GetWeatherTool>(); Create a tool from a static method When creating a tool from a static method the method must be public and static. using AnthropicClient.Models; class GetWeatherTool { public static string GetWeather(string location) { return $\"The weather in {location} is 72 degrees Fahrenheit\"; } } var getWeatherTool = Tool.CreateFromStaticMethod( \"Get Weather\", \"Get the weather for a location in the specified units\", typeof(GetWeatherTool), nameof(GetWeatherTool.GetWeather) ); Create a tool from an instance method When creating a tool from an instance method the method must be public and non-static. using AnthropicClient.Models; class GetWeatherTool { public string GetWeather(string location) { return $\"The weather in {location} is 72 degrees Fahrenheit\"; } } var toolInstance = new GetWeatherTool(); var getWeatherTool = Tool.CreateFromInstanceMethod( \"Get Weather\", \"Get the weather for a location in the specified units\", toolInstance, nameof(toolInstance.GetWeather) ); Create a tool from a delegate When creating a tool from a delegate the delegate must be a Func<TResult>, Func<T, TResult>, or Func<T1, T2, TResult>. If you need to create a tool from a delegate that takes more than 2 parameters you should create a complex type and pass that as the parameter. using AnthropicClient.Models; var tool = (string location, string units) => $\"The weather in {location} is 72 degrees {units}\"; var getWeatherTool = Tool.CreateFromFunction( \"Get Weather\", \"Get the weather for a location in the specified units\", tool ); Function Parameter Attribute When you create a tool from one of the methods above and send it to Anthropic in your request a JSON representation of the tool is provided in the message. This JSON representation includes the name, description, and input schema of the tool. This information is used by Anthropic's models to discern if and when it should use a tool. This library provides a FunctionParameterAttribute that can be used to provide additional information about the parameters of the tool. This information is used to provide a more detailed input schema for the tool. using AnthropicClient.Models; var tool = ( [FunctionParameter(description: \"The location of the weather being got\", name: \"Location\", required: true)] string location, string units ) => $\"The weather in {location} is 72 degrees {units}\"; var getWeatherTool = Tool.CreateFromFunction( \"Get Weather\", \"Get the weather for a location in the specified units\", tool ); Function Property Attribute This library also provides a FunctionPropertyAttribute that can be used to provide additional information about the members of complex types used as parameters in the tool. This information is used to provide a more detailed input schema for the tool. using AnthropicClient.Models; class GetWeatherInput { [FunctionProperty( description: \"The location of the weather being got\", required: true )] public string Location { get; } = string.Empty; [FunctionProperty( description: \"The units to get the weather in\", required: false, defaultValue: \"Fahrenheit\", possibleValues: [\"Fahrenheit\", \"Celsius\"] )] public string Units { get; } = \"Fahrenheit\"; } var tool = (GetWeatherInput input) => $\"The weather in {input.Location} is 72 degrees {input.Units}\"; var getWeatherTool = Tool.CreateFromFunction( \"Get Weather\", \"Get the weather for a location in the specified units\", tool ); Call a tool It is important to remember that while Anthropic's models do support tool use they don't actually have access to any built-in server-side tools. All tools are user provided. This means that while Anthropic's models can respond to a request to create a message with a request to use a tool that is all it is - a request. It is still up to the client to handle the tool request by calling the tool with the input provided by the model and then providing the result of that call back to the model. This library aims to make this process convenient by allowing you to simply provide the tools you want Anthropic's models to consider for use when creating a message, receive the response, check if the response contains a tool call, and if it does invoke the tool to get the result. Note Anthropic's API expects requests to contain messages that alternate between the user and the assistant. In addition if you receive a tool use from the model the API expects you to respond with a message that contains the result of the tool call. The tool use content will always be from the assistant while the tool result will always be from the user. using AnthropicClient; using AnthropicClient.Models; class GetWeatherTool : ITool { public string Name => \"Get Weather\"; public string Description => \"Get the weather for a location in the specified units\"; public MethodInfo Function => typeof(GetWeatherTool).GetMethod(nameof(GetWeather))!; public static string GetWeather(string location, string units) { return $\"The weather in {location} is 72 degrees {units}\"; } } List<Message> messages = [ new( MessageRole.User, [new TextContent(\"What is the weather in New York?\")] ) ]; List<Tool> tools = [Tool.CreateFromClass<GetWeatherTool>()]; var response = await client.CreateMessageAsync(new MessageRequest( AnthropicModels.Claude3Haiku, messages, tools: tools )); if (response.IsSuccess is false) { Console.WriteLine(\"Failed to create message\"); Console.WriteLine(\"Error Type: {0}\", response.Error.Error.Type); Console.WriteLine(\"Error Message: {0}\", response.Error.Error.Message); return; } messages.Add(new(MessageRole.Assistant, response.Content)); foreach (var content in response.Value.Content) { switch (content) { case TextContent textContent: Console.WriteLine(textContent.Text); break; case ToolUseContent toolUseContent: Console.WriteLine(toolUseContent.Name); break; } } if (response.Value.ToolCall is not null) { var toolCallResult = await response.Value.ToolCall.InvokeAsync<string>(); string toolResultContent; if (toolCallResult.IsSuccess && toolCallResult.Value is not null) { Console.WriteLine(toolCallResult.Value); toolResultContent = toolCallResult.Value; } else { Console.WriteLine(toolCallResult.Error.Message); toolResultContent = toolCallResult.Error.Message; } messages.Add( new( MessageRole.User, [ new ToolResultContent( response.Value.ToolCall.ToolUse.Id, toolResultContent ) ] ) ); } var finalResponse = await client.CreateMessageAsync(new MessageRequest( AnthropicModels.Claude3Haiku, messages, tools: tools )); if (finalResponse.IsSuccess is false) { Console.WriteLine(\"Failed to create message\"); Console.WriteLine(\"Error Type: {0}\", finalResponse.Error.Error.Type); Console.WriteLine(\"Error Message: {0}\", finalResponse.Error.Error.Message); return; } foreach (var content in finalResponse.Value.Content) { switch (content) { case TextContent textContent: Console.WriteLine(textContent.Text); break; } } If an exception is thrown while invoking the tool the InvokeAsync method will return a ToolCallResult with the exception contained in the Error property. Note The InvokeAsync method does accept a generic type parameter that can be used to specify the type of the Value property of the ToolCallResult. If it is not specified it will be an object. Call a tool in streamed message Tool calling is also supported when streaming the message response. The following example demonstrates how you can handle a tool call in a streamed message response. using AnthropicClient; using AnthropicClient.Models; var tool = (string location, string units) => $\"The weather in {location} is 72 degrees {units}\"; var messages = [ new( MessageRole.User, [new TextContent(\"What is the weather in New York?\")] ) ]; var tools = [Tool.CreateFromFunction( \"Get Weather\", \"Get the weather for a location in the specified units\", tool )]; var events = client.CreateMessageAsync(new StreamMessageRequest( AnthropicModels.Claude3Haiku, messages, tools: tools )); MessageResponse? response = null; await foreach (var e in events) { switch (e.Data) { case var data when data is MessageCompleteEventData msgData: response = msgData.Message; break; } } if (response is null) { Console.WriteLine(\"Failed to get message response\"); return; } messages.Add(new(MessageRole.Assistant, response.Content)); if (response?.ToolCall is not null) { var toolCallResult = await response.ToolCall.InvokeAsync<string>(); string toolResultContent; if (toolCallResult.IsSuccess && toolCallResult.Value is not null) { toolResultContent = toolCallResult.Value; } else { toolResultContent = toolCallResult.Error.Message; } messages.Add( new( MessageRole.User, [ new ToolResultContent( response.ToolCall.ToolUse.Id, toolResultContent ) ] ) ); } var finalResponse = await client.CreateMessageAsync(new MessageRequest( AnthropicModels.Claude3Haiku, messages, tools: tools )); if (finalResponse.IsSuccess is false) { Console.WriteLine(\"Failed to create message\"); Console.WriteLine(\"Error Type: {0}\", finalResponse.Error.Error.Type); Console.WriteLine(\"Error Message: {0}\", finalResponse.Error.Error.Message); return; } foreach (var content in finalResponse.Value.Content) { switch (content) { case TextContent textContent: Console.WriteLine(textContent.Text); break; } } If you do find that you need more control over how exactly provided tools are called and how the result of those tools are returned you can avoid using the InvokeAsync method and instead use the Tool and ToolUse properties of the ToolCall instance to implement your own solution. System Prompt Anthropic's models support the use of system prompts to provide additional context to the user. This can be used to provide additional information to the user or to ask for additional information from the user. This feature is covered in depth in Anthropic's API Documentation. This library aims to make using system prompts convenient by allowing you to provide the system prompts you want Anthropic's models to consider for use when creating a message. System Message You can create a system prompt by providing a string as the system parameter in the MessageRequest or StreamMessageRequest constructor. using AnthropicClient; using AnthropicClient.Models; var response = await client.CreateMessageAsync(new MessageRequest( AnthropicModels.Claude3Haiku, [ new( MessageRole.User, [new TextContent(\"Please write a haiku about the ocean.\")] ) ], system: \"You are a internationally renowned poet. You excel at writing haikus. )); if (response.IsSuccess is false) { Console.WriteLine(\"Failed to create message\"); Console.WriteLine(\"Error Type: {0}\", response.Error.Error.Type); Console.WriteLine(\"Error Message: {0}\", response.Error.Error.Message); return; } foreach (var content in response.Value.Content) { switch (content) { case TextContent textContent: Console.WriteLine(textContent.Text); break; } } System Messages You can create a more complex system prompt by providing a List<TextContent> as the systemMessages parameter in the MessageRequest or StreamMessageRequest constructor. using AnthropicClient; using AnthropicClient.Models; var response = await client.CreateMessageAsync(new MessageRequest( AnthropicModels.Claude3Haiku, [ new( MessageRole.User, [new TextContent(\"Please write a haiku about the ocean.\")] ) ], systemMessages: [ new TextContent(\"You are a internationally renowned poet. You excel at writing haikus.\"), new TextContent(\"You have been asked to write a haiku about the ocean.\") ] )); if (response.IsSuccess is false) { Console.WriteLine(\"Failed to create message\"); Console.WriteLine(\"Error Type: {0}\", response.Error.Error.Type); Console.WriteLine(\"Error Message: {0}\", response.Error.Error.Message); return; } foreach (var content in response.Value.Content) { switch (content) { case TextContent textContent: Console.WriteLine(textContent.Text); break; } } Prompt Caching Anthropic provides a feature called Prompt Caching that allows you to cache all or part of the prompt you send to the model. This can be used to improve the performance of your application by reducing latency and token usage. This feature is covered in depth in Anthropic's API Documentation. Prompt caching can be used to cache all parts of the prompt including system messages, user messages, and tools. You should refer to the Anthropic API Documentation for specifics on limitations and requirements for using prompt caching. This library aims to make using prompt caching convenient and give you complete control over what parts of the prompt are cached. Currently there is only one type of cache control available - EphemeralCacheControl. Caching System Messages System messages can be cached by providing a List<TextContent> as the systemMessages parameter in the MessageRequest or StreamMessageRequest constructor and having one or more of the TextContent instances have the CacheControl property set. using AnthropicClient; using AnthropicClient.Models; var response = await client.CreateMessageAsync(new MessageRequest( AnthropicModels.Claude3Haiku, [ new( MessageRole.User, [new TextContent(\"Please write a haiku about the ocean.\")] ) ], systemMessages: [ new TextContent(\"You are a internationally renowned poet. You excel at writing haikus. Please use the following as examples.\"), new TextContent(exampleHaikus, new EphemeralCacheControl()) ] )); if (response.IsSuccess is false) { Console.WriteLine(\"Failed to create message\"); Console.WriteLine(\"Error Type: {0}\", response.Error.Error.Type); Console.WriteLine(\"Error Message: {0}\", response.Error.Error.Message); return; } foreach (var content in response.Value.Content) { switch (content) { case TextContent textContent: Console.WriteLine(textContent.Text); break; } } Caching User Messages User messages can be cached by providing a List<Content> as the messages parameter in the MessageRequest or StreamMessageRequest constructor and having one or more of the Content instances have the CacheControl property set. using AnthropicClient; using AnthropicClient.Models; var response = await client.CreateMessageAsync(new MessageRequest( AnthropicModels.Claude3Haiku, [ new( MessageRole.User, [ new TextContent(\"Please write a haiku about the ocean. Here are some examples of haikus I like.\"), new TextContent(exampleHaikus, new EphemeralCacheControl()) ] ), ] )); if (response.IsSuccess is false) { Console.WriteLine(\"Failed to create message\"); Console.WriteLine(\"Error Type: {0}\", response.Error.Error.Type); Console.WriteLine(\"Error Message: {0}\", response.Error.Error.Message); return; } foreach (var content in response.Value.Content) { switch (content) { case TextContent textContent: Console.WriteLine(textContent.Text); break; } } Caching Tools Tools can be cached by providing a List<Tool> as the tools parameter in the MessageRequest or StreamMessageRequest constructor and having one or more of the Tool instances have the CacheControl property set. This property can be set after the tool is created manually or by using one of the static methods on the Tool class. using AnthropicClient; using AnthropicClient.Models; var tool = (string location, string units) => $\"The weather in {location} is 72 degrees {units}\"; var getWeatherTool = Tool.CreateFromFunction( \"Get Weather\", \"Get the weather for a location in the specified units\", tool, new EphemeralCacheControl() ); var response = await client.CreateMessageAsync(new MessageRequest( AnthropicModels.Claude3Haiku, [ new( MessageRole.User, [new TextContent(\"What is the weather in New York?\")] ) ], tools: [ // Lots of other tools // ... getWeatherTool ] )); if (response.IsSuccess is false) { Console.WriteLine(\"Failed to create message\"); Console.WriteLine(\"Error Type: {0}\", response.Error.Error.Type); Console.WriteLine(\"Error Message: {0}\", response.Error.Error.Message); return; } foreach (var content in response.Value.Content) { switch (content) { case TextContent textContent: Console.WriteLine(textContent.Text); break; case ToolUseContent toolUseContent: Console.WriteLine(toolUseContent.Name); break; } } PDF Support Anthropic provides a feature called PDF Support that allows Claude to support PDF input and understand both text and visual content within documents. This feature is covered in depth in Anthropic's API Documentation. PDF support can be used to provide a PDF document as input to the model. This can be used to provide additional context to the model or to ask for additional information from the model. This library aims to make using PDF support convenient by allowing you to provide the PDF document you want Anthropic's models to consider for use when creating a message. PDF Document You can provide a PDF document by providing its base64 encoded content as a DocumentContent instance in the list of messages in the MessageRequest or StreamMessageRequest constructor. using AnthropicClient; using AnthropicClient.Models; var request = new MessageRequest( model: AnthropicModels.Claude35Sonnet, messages: [ new(MessageRole.User, [new TextContent(\"What is the title of this paper?\")]), new(MessageRole.User, [new DocumentContent(\"application/pdf\", base64Data)]) ] ); var response = await client.CreateMessageAsync(request); if (response.IsSuccess is false) { Console.WriteLine(\"Failed to create message\"); Console.WriteLine(\"Error Type: {0}\", response.Error.Error.Type); Console.WriteLine(\"Error Message: {0}\", response.Error.Error.Message); return; } foreach (var content in response.Value.Content) { switch (content) { case TextContent textContent: Console.WriteLine(textContent.Text); break; } } Message Batches Anthropic provides a feature called Message Batches that allows you to send multiple messages in a single request. This feature is covered in depth in Anthropic's API Documentation. Create a message batch You can create a message batch that will consist of one or more requests to create messages. using AnthropicClient; using AnthropicClient.Models; var request = new MessageBatchRequest([ new( Guid.NewGuid().ToString(), new( model: AnthropicModels.Claude3Haiku, messages: [new(MessageRole.User, [new TextContent(\"Hello!\")])] ) ), ]); var response = await client.CreateMessageBatchAsync(request); if (response.IsFailure) { Console.WriteLine(\"Failed to create message batch\"); Console.WriteLine(\"Error Type: {0}\", response.Error.Error.Type); Console.WriteLine(\"Error Message: {0}\", response.Error.Error.Message); return; } Console.WriteLine(\"Message Batch Id: {0}\", response.Value.Id); Get a message batch You can retrieve a message batch by its id. using AnthropicClient; using AnthropicClient.Models; var response = await client.GetMessageBatchAsync(\"batch-id\"); if (response.IsFailure) { Console.WriteLine(\"Failed to get message batch\"); Console.WriteLine(\"Error Type: {0}\", response.Error.Error.Type); Console.WriteLine(\"Error Message: {0}\", response.Error.Error.Message); return; } Console.WriteLine(\"Message Batch Id: {0}\", response.Value.Id); Get a message batch results You can retrieve the results of a message batch by its id. The results are returned as an IAsyncEnumerable collection so that they can be streamed and processed as they are received. using AnthropicClient; using AnthropicClient.Models; var response = await client.GetMessageBatchResultsAsync(\"batch-id\"); if (response.IsFailure) { Console.WriteLine(\"Failed to get message batch results\"); Console.WriteLine(\"Error Type: {0}\", response.Error.Error.Type); Console.WriteLine(\"Error Message: {0}\", response.Error.Error.Message); return; } await foreach (var item in response.Value) { Console.WriteLine(\"Item Custom Id: {0}\", result.CustomId); switch (item.Result) { case SucceededMessageBatchResult successResult: foreach (var content in successResult.Message.Content) { if (content is TextContent textContent) { Console.WriteLine(\"Message Batch Result: {0}\", textContent.Text); } } break; default: Console.WriteLine(\"Message Batch Result: {0}\", item.Result.Type); break; } } List message batches You can retrieve a page of message batches. using AnthropicClient; using AnthropicClient.Models; var response = await client.ListMessageBatchesAsync(); if (response.IsFailure) { Console.WriteLine(\"Failed to list message batches\"); Console.WriteLine(\"Error Type: {0}\", response.Error.Error.Type); Console.WriteLine(\"Error Message: {0}\", response.Error.Error.Message); return; } foreach (var batch in response.Value.Data) { Console.WriteLine(\"Message Batch Id: {0}\", batch.Id); } List all message batches You can also retrieve all the pages of message batches without having to implement pagination yourself. This is done by returning an IAsyncEnumerable collection that can be streamed and processed as the pages are received. using AnthropicClient; using AnthropicClient.Models; var pageResponses = client.ListAllMessageBatchesAsync(); await foreach (var response in pageResponses) { if (response.IsFailure) { Console.WriteLine(\"Failed to list message batches\"); Console.WriteLine(\"Error Type: {0}\", response.Error.Error.Type); Console.WriteLine(\"Error Message: {0}\", response.Error.Error.Message); return; } foreach (var batch in response.Value.Data) { Console.WriteLine(\"Message Batch Id: {0}\", batch.Id); } } Cancel a message batch You can cancel a message batch by its id. using AnthropicClient; using AnthropicClient.Models; var response = await client.CancelMessageBatchAsync(\"batch-id\"); if (response.IsFailure) { Console.WriteLine(\"Failed to cancel message batch\"); Console.WriteLine(\"Error Type: {0}\", response.Error.Error.Type); Console.WriteLine(\"Error Message: {0}\", response.Error.Error.Message); return; } Console.WriteLine(\"Message Batch Id: {0}\", response.Value.Id); Console.WriteLine(\"Message Batch Status: {0}\", response.Value.ProcessingStatus); Delete a message batch You can delete a message batch that is no longer being processed by its id. using AnthropicClient; using AnthropicClient.Models; var response = await client.DeleteMessageBatchAsync(\"batch-id\"); if (response.IsFailure) { Console.WriteLine(\"Failed to delete message batch\"); Console.WriteLine(\"Error Type: {0}\", response.Error.Error.Type); Console.WriteLine(\"Error Message: {0}\", response.Error.Error.Message); return; } Console.WriteLine(\"Message Batch Id: {0}\", response.Value.Id);"
  }
}